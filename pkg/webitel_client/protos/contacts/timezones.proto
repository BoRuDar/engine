syntax = "proto3";
package webitel.contacts;
option go_package = "webitel.go/api/contacts;contacts";

import "contacts/fields.proto";
import "google/protobuf/wrappers.proto";


// // A Contact's associated Tag.
// // Output purpose only.
// message Label {

//   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
//     // PUT /contacts/{source.id}/labels/{id}
//     example: "{\"etag\":\"1679792219687\",\"tag\":\"VIP\"}"
//   };

//   // Metadata about the Label.
//   FieldMetadata metadata = 1;
//   // REQUIRED. Hashtag value;
//   // NOTE: Keep in mind, hashtags are not case-sensitive,
//   // but adding capital letters does make them easier to read:
//   // #MakeAWish vs. #makeawish.
//   string tag = 5;
// }

message TimeLocation {

  // The Location name corresponding to
  // a file in the IANA Time Zone database,
  // such as "Europe/Kyiv".
  string name = 1;
  // Custom location offset (seconds east of UTC).
  int64 offset = 2;
  // Current time at this time zone location.
  // Query: `?fields=location{time.format(DateTime)}`
  string time = 3;
}

// A Contact's timezone preference.
message Timezone {

  // [META]: --------------------------------------

  // The unique ID of the association. Never changes.
  string id = 1;
  
  // Version of the latest update. Numeric sequence.
  int32 ver = 2;

  // Unique ID of the latest version of the update.
  // This ID changes after any update to the underlying value(s).
  string etag = 3;

  // // The Contact source associated with.
  // webitel.contacts.Lookup contact = 4;

  // The user who created this Field.
  int64 created_at = 5;

  // Timestamp(milli) of the Field creation.
  webitel.contacts.Lookup created_by = 6;
  
  // Timestamp(milli) of the last Field update.
  // Take part in Etag generation.
  int64 updated_at = 7;
  
  // The user who performed last Update.
  webitel.contacts.Lookup updated_by = 8;
  
  // [VALUE]: --------------------------------------

  // Indicates whether this association is the default
  // among others of the same type.
  bool primary = 11;

  // The Location name corresponding to a file
  // in the IANA Time Zone database, such as "Europe/Kyiv".
  string location = 12;

  // Custom location offset (seconds east of UTC).
  int64 offset = 13;

  // Current time at this time zone location.
  // Query: `?fields=location{time.format(DateTime)}`
  string time = 14;

}

// An input of the Contact's language.
message InputTimezone {

  
  // Unique ID of the latest version of an existing resource.
  string etag = 1;
  
  // Indicates whether this association must be default among others.
  bool primary = 11;

  // The Location name corresponding to a file
  // in the IANA Time Zone database, such as "Europe/Kyiv" or custom.
  string location = 12;

  // Custom location name with offset (seconds east of UTC).
  int64 offset = 13;

}

// Timezones service catalogs.
service Timezones {

  // // Search the Contact's Label(s).
  // rpc ListTimezones(SearchLanguageRequest) returns (LanguageList) {
  //   option (google.api.http) = {
  //     get: "/languages"
  //   };
  // }

  // rpc GetContactLanguages(ContactLanguageRequest) returns (LanguageList) {

  // List of the Contact's language association(s).
  rpc GetContactTimezones(SearchTimezonesRequest) returns (TimezoneList) {

  }
  // Associate more language(s) with the Contact.
  rpc AddContactTimezones(CreateTimezonesRequest) returns (TimezoneList) {

  }
  // Reset all Contact's languages to fit the specified fixed set.
  rpc SetContactTimezones(UpdateTimezonesRequest) returns (TimezoneList) {

  }
  // Update the Contact's language association details.
  rpc SetContactTimezone(UpdateTimezoneRequest) returns (TimezoneList) {

  }
  // Remove the Contact's language association(s).
  rpc DelContactTimezones(DeleteTimezonesRequest) returns (TimezoneList) {

  }

  // Remove the Contact's language association.
  rpc DelContactTimezone(DeleteTimezoneRequest) returns (Timezone) {

  }
}

// Timezone dataset.
// NOTE: Edge represents connection between two nodes.
// So this ContactLabels.data are always subordinate to some contact.id.
message TimezoneList {

  // Timezone dataset page.
  repeated Timezone data = 1;
  // The page number of the partial result.
  int32 page = 2;
  // Indicates that this is a partial result.
  // More data available upon query: ?size=${data.len}&page=${page++}
  bool next = 3;

}

// Search for the Contact's Language(s) request.
message SearchTimezonesRequest {

  // ----- Result Options ----- //

  // Page number of result dataset records. offset = (page*size)
  int32 page = 2;
  
  // Size count of records on result page. limit = (size++)
  int32 size = 1;
  
  // Search term: location name;
  // `?` - matches any one character
  // `*` - matches 0 or more characters
  string q = 6;

  // Sort the result according to fields.
  repeated string sort = 3;

  // Fields to be retrieved as a result.
  repeated string fields = 4;

  // ----- Search Options ----- //

  // Contact ID associated with.
  string contact_id = 5;
  
  // Lookup contact = 5;

  // Record(s) with unique ID only.
  repeated string id = 7;

  // Primary timezone only.
  google.protobuf.BoolValue primary = 8;

}


message CreateTimezonesRequest {

  // ----- Result Options ----- //

  // Fields to be retrieved as a result.
  repeated string fields = 1;

  // ----- Create Options ----- //

  // Link contact ID.
  string contact_id = 2;
  
  // Lookup contact = 2;

  // Fixed set of label(s) to be linked with the contact.
  // Label(s) that conflicts with already linked will be updated.

  // Array of the unique well-formed IETF BCP 47 language tag(s) to associate with the Contact.
  // The first element will become `primary` one.
  repeated InputTimezone input = 3;

}


message UpdateTimezonesRequest {

  // ----- Result Options ----- //

  // Fields to be retrieved as a result.
  repeated string fields = 1;

  // ----- Update Options ----- //

  // Contact ID associated with.
  string contact_id = 2;
  
  // Lookup contact = 2;

  // ----- Update Options ----- //

  // Final set of labels(s) to be linked with the contact.
  // Label(s) that are already linked with the contact
  // but not given in here will be removed.

  // Final set [array] of the unique well-formed IETF BCP 47 language tag(s) to associate with the Contact.
  // The first element will become `primary` one.
  repeated InputTimezone input = 3;

}


message UpdateTimezoneRequest {

  // ----- Result Options ----- //

  // Fields to be retrieved as a result.
  repeated string fields = 1;

  // ----- Lookup Options ----- //

  // Contact ID associated with.
  string contact_id = 2;
  
  // Lookup contact = 2;

  // ----- Update Options ----- //

  // Final set of labels(s) to be linked with the contact.
  // Label(s) that are already linked with the contact
  // but not given in here will be removed.

  // Final set [array] of the unique well-formed IETF BCP 47 language tag(s) to associate with the Contact.
  // The first element will become `primary` one.
  InputTimezone input = 3;

}

message DeleteTimezonesRequest {

  // ----- Result Options ----- //

  // Fields to be retrieved as a result.
  repeated string fields = 1;

  // ----- Filter Options ----- //

  // Contact ID associated with.
  string contact_id = 2;
  
  // Lookup contact = 2;

  // ----- Delete Options ----- //

  // Set of unique ID(s) to remove.
  repeated string etag = 3;

}

message DeleteTimezoneRequest {

  // ----- Result Options ----- //

  // Fields to be retrieved as a result.
  repeated string fields = 1;

  // ----- Delete Options ----- //

  // Contact ID associated with.
  string contact_id = 2;
  
  // Lookup contact = 2;

  // Unique ID to remove.
  string etag = 3;

}