// Code generated by protoc-gen-go. DO NOT EDIT.
// source: acr_routing_variables.proto

package engine

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RoutingVariable struct {
	Id       int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DomainId int64  `protobuf:"varint,2,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	Key      string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Value    string `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
}

func (m *RoutingVariable) Reset()                    { *m = RoutingVariable{} }
func (m *RoutingVariable) String() string            { return proto.CompactTextString(m) }
func (*RoutingVariable) ProtoMessage()               {}
func (*RoutingVariable) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *RoutingVariable) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RoutingVariable) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *RoutingVariable) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RoutingVariable) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ListRoutingVariable struct {
	Items []*RoutingVariable `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ListRoutingVariable) Reset()                    { *m = ListRoutingVariable{} }
func (m *ListRoutingVariable) String() string            { return proto.CompactTextString(m) }
func (*ListRoutingVariable) ProtoMessage()               {}
func (*ListRoutingVariable) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *ListRoutingVariable) GetItems() []*RoutingVariable {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*RoutingVariable)(nil), "engine.RoutingVariable")
	proto.RegisterType((*ListRoutingVariable)(nil), "engine.ListRoutingVariable")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RoutingVariableApi service

type RoutingVariableApiClient interface {
	// POST /routing/variable
	Create(ctx context.Context, in *RoutingVariable, opts ...grpc.CallOption) (*RoutingVariable, error)
	// GET /routing/variable?size=10&page=0
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListRoutingVariable, error)
	// GET /routing/variable/:ID
	Get(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*RoutingVariable, error)
	// PUT /routing/variable/:ID
	Update(ctx context.Context, in *RoutingVariable, opts ...grpc.CallOption) (*RoutingVariable, error)
	// DELETE /routing/variable/:ID
	Remove(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*RoutingVariable, error)
}

type routingVariableApiClient struct {
	cc *grpc.ClientConn
}

func NewRoutingVariableApiClient(cc *grpc.ClientConn) RoutingVariableApiClient {
	return &routingVariableApiClient{cc}
}

func (c *routingVariableApiClient) Create(ctx context.Context, in *RoutingVariable, opts ...grpc.CallOption) (*RoutingVariable, error) {
	out := new(RoutingVariable)
	err := grpc.Invoke(ctx, "/engine.RoutingVariableApi/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingVariableApiClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListRoutingVariable, error) {
	out := new(ListRoutingVariable)
	err := grpc.Invoke(ctx, "/engine.RoutingVariableApi/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingVariableApiClient) Get(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*RoutingVariable, error) {
	out := new(RoutingVariable)
	err := grpc.Invoke(ctx, "/engine.RoutingVariableApi/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingVariableApiClient) Update(ctx context.Context, in *RoutingVariable, opts ...grpc.CallOption) (*RoutingVariable, error) {
	out := new(RoutingVariable)
	err := grpc.Invoke(ctx, "/engine.RoutingVariableApi/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingVariableApiClient) Remove(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*RoutingVariable, error) {
	out := new(RoutingVariable)
	err := grpc.Invoke(ctx, "/engine.RoutingVariableApi/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoutingVariableApi service

type RoutingVariableApiServer interface {
	// POST /routing/variable
	Create(context.Context, *RoutingVariable) (*RoutingVariable, error)
	// GET /routing/variable?size=10&page=0
	List(context.Context, *ListRequest) (*ListRoutingVariable, error)
	// GET /routing/variable/:ID
	Get(context.Context, *ItemRequest) (*RoutingVariable, error)
	// PUT /routing/variable/:ID
	Update(context.Context, *RoutingVariable) (*RoutingVariable, error)
	// DELETE /routing/variable/:ID
	Remove(context.Context, *ItemRequest) (*RoutingVariable, error)
}

func RegisterRoutingVariableApiServer(s *grpc.Server, srv RoutingVariableApiServer) {
	s.RegisterService(&_RoutingVariableApi_serviceDesc, srv)
}

func _RoutingVariableApi_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingVariable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingVariableApiServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.RoutingVariableApi/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingVariableApiServer).Create(ctx, req.(*RoutingVariable))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingVariableApi_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingVariableApiServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.RoutingVariableApi/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingVariableApiServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingVariableApi_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingVariableApiServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.RoutingVariableApi/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingVariableApiServer).Get(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingVariableApi_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingVariable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingVariableApiServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.RoutingVariableApi/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingVariableApiServer).Update(ctx, req.(*RoutingVariable))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingVariableApi_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingVariableApiServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.RoutingVariableApi/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingVariableApiServer).Remove(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoutingVariableApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "engine.RoutingVariableApi",
	HandlerType: (*RoutingVariableApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RoutingVariableApi_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RoutingVariableApi_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RoutingVariableApi_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RoutingVariableApi_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _RoutingVariableApi_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acr_routing_variables.proto",
}

func init() { proto.RegisterFile("acr_routing_variables.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x4d, 0xd2, 0x06, 0x3b, 0x05, 0x95, 0xa9, 0x60, 0x68, 0x2e, 0x21, 0xa7, 0x5c, 0xcc,
	0xa1, 0x22, 0x88, 0xf4, 0x22, 0x0a, 0x52, 0xf0, 0x14, 0xd0, 0x6b, 0xd8, 0x76, 0xc7, 0x32, 0xd8,
	0x64, 0x63, 0x76, 0x13, 0xf0, 0xe1, 0x7c, 0x37, 0x69, 0xd6, 0x82, 0x46, 0x2a, 0xe8, 0x6d, 0xf7,
	0x9b, 0x6f, 0xf6, 0xff, 0x61, 0x21, 0x14, 0xab, 0x3a, 0xaf, 0x55, 0x63, 0xb8, 0x5c, 0xe7, 0xad,
	0xa8, 0x59, 0x2c, 0x37, 0xa4, 0xd3, 0xaa, 0x56, 0x46, 0xa1, 0x4f, 0xe5, 0x9a, 0x4b, 0x9a, 0x8e,
	0x57, 0xaa, 0xd4, 0xc6, 0xc2, 0xf8, 0x19, 0x8e, 0x33, 0xeb, 0x3f, 0x7d, 0xea, 0x78, 0x04, 0x2e,
	0xcb, 0xc0, 0x89, 0x9c, 0xc4, 0xcb, 0x5c, 0x96, 0x18, 0xc2, 0x48, 0xaa, 0x42, 0x70, 0x99, 0xb3,
	0x0c, 0xdc, 0x0e, 0x1f, 0x5a, 0xb0, 0x90, 0x78, 0x02, 0xde, 0x0b, 0xbd, 0x05, 0x5e, 0xe4, 0x24,
	0xa3, 0x6c, 0x7b, 0xc4, 0x53, 0x18, 0xb6, 0x62, 0xd3, 0x50, 0x30, 0xe8, 0x98, 0xbd, 0xc4, 0x77,
	0x30, 0x79, 0x60, 0x6d, 0xfa, 0x59, 0xe7, 0x30, 0x64, 0x43, 0x85, 0x0e, 0x9c, 0xc8, 0x4b, 0xc6,
	0xb3, 0xb3, 0xd4, 0x76, 0x4c, 0x7b, 0x5e, 0x66, 0xad, 0xd9, 0xbb, 0x0b, 0xd8, 0x1b, 0xdd, 0x54,
	0x8c, 0x73, 0xf0, 0x6f, 0x6b, 0x12, 0x86, 0x70, 0xdf, 0x03, 0xd3, 0x7d, 0x83, 0xf8, 0x00, 0xaf,
	0x61, 0xb0, 0xad, 0x86, 0x93, 0x9d, 0xd2, 0x15, 0xa5, 0xd7, 0x86, 0xb4, 0x99, 0x86, 0xdf, 0xe0,
	0x8f, 0xdd, 0x4b, 0xf0, 0xee, 0xe9, 0xcb, 0xea, 0xc2, 0x50, 0xb1, 0x5b, 0xfd, 0x25, 0x72, 0x0e,
	0xfe, 0x63, 0x25, 0xff, 0x5b, 0xf8, 0x0a, 0xfc, 0x8c, 0x0a, 0xd5, 0xd2, 0x5f, 0x73, 0x97, 0x7e,
	0xf7, 0xe9, 0x17, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x6b, 0x1b, 0x28, 0x28, 0x02, 0x00,
	0x00,
}
