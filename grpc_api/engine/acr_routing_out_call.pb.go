// Code generated by protoc-gen-go. DO NOT EDIT.
// source: acr_routing_out_call.proto

package engine

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RoutingOutboundCall struct {
	Id          int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DomainId    int64   `protobuf:"varint,2,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	CreatedAt   int64   `protobuf:"varint,3,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	CreatedBy   *Lookup `protobuf:"bytes,4,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	UpdatedAt   int64   `protobuf:"varint,5,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	UpdatedBy   *Lookup `protobuf:"bytes,6,opt,name=updated_by,json=updatedBy" json:"updated_by,omitempty"`
	Name        string  `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	Description string  `protobuf:"bytes,8,opt,name=description" json:"description,omitempty"`
	Scheme      *Lookup `protobuf:"bytes,9,opt,name=scheme" json:"scheme,omitempty"`
	Pattern     string  `protobuf:"bytes,10,opt,name=pattern" json:"pattern,omitempty"`
	Priority    int32   `protobuf:"varint,11,opt,name=priority" json:"priority,omitempty"`
	Debug       bool    `protobuf:"varint,12,opt,name=debug" json:"debug,omitempty"`
	Disabled    bool    `protobuf:"varint,13,opt,name=disabled" json:"disabled,omitempty"`
}

func (m *RoutingOutboundCall) Reset()                    { *m = RoutingOutboundCall{} }
func (m *RoutingOutboundCall) String() string            { return proto.CompactTextString(m) }
func (*RoutingOutboundCall) ProtoMessage()               {}
func (*RoutingOutboundCall) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RoutingOutboundCall) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RoutingOutboundCall) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *RoutingOutboundCall) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *RoutingOutboundCall) GetCreatedBy() *Lookup {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *RoutingOutboundCall) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *RoutingOutboundCall) GetUpdatedBy() *Lookup {
	if m != nil {
		return m.UpdatedBy
	}
	return nil
}

func (m *RoutingOutboundCall) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoutingOutboundCall) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RoutingOutboundCall) GetScheme() *Lookup {
	if m != nil {
		return m.Scheme
	}
	return nil
}

func (m *RoutingOutboundCall) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *RoutingOutboundCall) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *RoutingOutboundCall) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

func (m *RoutingOutboundCall) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

type ListRoutingOutboundCall struct {
	Items []*RoutingOutboundCall `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ListRoutingOutboundCall) Reset()                    { *m = ListRoutingOutboundCall{} }
func (m *ListRoutingOutboundCall) String() string            { return proto.CompactTextString(m) }
func (*ListRoutingOutboundCall) ProtoMessage()               {}
func (*ListRoutingOutboundCall) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ListRoutingOutboundCall) GetItems() []*RoutingOutboundCall {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*RoutingOutboundCall)(nil), "engine.RoutingOutboundCall")
	proto.RegisterType((*ListRoutingOutboundCall)(nil), "engine.ListRoutingOutboundCall")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RoutingOutboundCallApi service

type RoutingOutboundCallApiClient interface {
	// POST /routing/outbound_call
	Create(ctx context.Context, in *RoutingOutboundCall, opts ...grpc.CallOption) (*RoutingOutboundCall, error)
	// GET /routing/outbound_call
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListRoutingOutboundCall, error)
	// GET /routing/outbound_call/:ID
	Get(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*RoutingOutboundCall, error)
	// PUT /routing/outbound_call/:ID
	Update(ctx context.Context, in *RoutingOutboundCall, opts ...grpc.CallOption) (*RoutingOutboundCall, error)
	// DELETE /routing/outbound_call/:ID
	Remove(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*RoutingOutboundCall, error)
}

type routingOutboundCallApiClient struct {
	cc *grpc.ClientConn
}

func NewRoutingOutboundCallApiClient(cc *grpc.ClientConn) RoutingOutboundCallApiClient {
	return &routingOutboundCallApiClient{cc}
}

func (c *routingOutboundCallApiClient) Create(ctx context.Context, in *RoutingOutboundCall, opts ...grpc.CallOption) (*RoutingOutboundCall, error) {
	out := new(RoutingOutboundCall)
	err := grpc.Invoke(ctx, "/engine.RoutingOutboundCallApi/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingOutboundCallApiClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListRoutingOutboundCall, error) {
	out := new(ListRoutingOutboundCall)
	err := grpc.Invoke(ctx, "/engine.RoutingOutboundCallApi/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingOutboundCallApiClient) Get(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*RoutingOutboundCall, error) {
	out := new(RoutingOutboundCall)
	err := grpc.Invoke(ctx, "/engine.RoutingOutboundCallApi/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingOutboundCallApiClient) Update(ctx context.Context, in *RoutingOutboundCall, opts ...grpc.CallOption) (*RoutingOutboundCall, error) {
	out := new(RoutingOutboundCall)
	err := grpc.Invoke(ctx, "/engine.RoutingOutboundCallApi/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingOutboundCallApiClient) Remove(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*RoutingOutboundCall, error) {
	out := new(RoutingOutboundCall)
	err := grpc.Invoke(ctx, "/engine.RoutingOutboundCallApi/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoutingOutboundCallApi service

type RoutingOutboundCallApiServer interface {
	// POST /routing/outbound_call
	Create(context.Context, *RoutingOutboundCall) (*RoutingOutboundCall, error)
	// GET /routing/outbound_call
	List(context.Context, *ListRequest) (*ListRoutingOutboundCall, error)
	// GET /routing/outbound_call/:ID
	Get(context.Context, *ItemRequest) (*RoutingOutboundCall, error)
	// PUT /routing/outbound_call/:ID
	Update(context.Context, *RoutingOutboundCall) (*RoutingOutboundCall, error)
	// DELETE /routing/outbound_call/:ID
	Remove(context.Context, *ItemRequest) (*RoutingOutboundCall, error)
}

func RegisterRoutingOutboundCallApiServer(s *grpc.Server, srv RoutingOutboundCallApiServer) {
	s.RegisterService(&_RoutingOutboundCallApi_serviceDesc, srv)
}

func _RoutingOutboundCallApi_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingOutboundCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingOutboundCallApiServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.RoutingOutboundCallApi/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingOutboundCallApiServer).Create(ctx, req.(*RoutingOutboundCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingOutboundCallApi_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingOutboundCallApiServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.RoutingOutboundCallApi/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingOutboundCallApiServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingOutboundCallApi_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingOutboundCallApiServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.RoutingOutboundCallApi/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingOutboundCallApiServer).Get(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingOutboundCallApi_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingOutboundCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingOutboundCallApiServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.RoutingOutboundCallApi/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingOutboundCallApiServer).Update(ctx, req.(*RoutingOutboundCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingOutboundCallApi_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingOutboundCallApiServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.RoutingOutboundCallApi/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingOutboundCallApiServer).Remove(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoutingOutboundCallApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "engine.RoutingOutboundCallApi",
	HandlerType: (*RoutingOutboundCallApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RoutingOutboundCallApi_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RoutingOutboundCallApi_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RoutingOutboundCallApi_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RoutingOutboundCallApi_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _RoutingOutboundCallApi_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acr_routing_out_call.proto",
}

func init() { proto.RegisterFile("acr_routing_out_call.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x5f, 0x8b, 0xd3, 0x40,
	0x10, 0x37, 0x4d, 0x9b, 0x6b, 0x27, 0x7a, 0x0f, 0x73, 0xa2, 0x4b, 0x0e, 0x31, 0xf4, 0x41, 0xf2,
	0x62, 0xc1, 0xfa, 0x24, 0x88, 0x70, 0x7f, 0x40, 0x0e, 0x0a, 0x42, 0xc0, 0xe7, 0xb0, 0xc9, 0x0e,
	0x75, 0x31, 0xd9, 0x8d, 0xc9, 0x44, 0xc8, 0xf7, 0xf1, 0x6b, 0xf9, 0x5d, 0xa4, 0x9b, 0xa6, 0x9e,
	0x10, 0x4e, 0xd0, 0xb7, 0xcc, 0xef, 0xdf, 0xfc, 0x92, 0x21, 0x10, 0xc9, 0xa2, 0xc9, 0x1a, 0xdb,
	0xb1, 0x36, 0xfb, 0xcc, 0x76, 0x9c, 0x15, 0xb2, 0x2c, 0x37, 0x75, 0x63, 0xd9, 0x62, 0x40, 0x66,
	0xaf, 0x0d, 0x45, 0x61, 0x61, 0x4d, 0xcb, 0x03, 0xb8, 0xfe, 0xe1, 0xc3, 0x45, 0x3a, 0xe8, 0x3f,
	0x75, 0x9c, 0xdb, 0xce, 0xa8, 0x1b, 0x59, 0x96, 0x78, 0x0e, 0x33, 0xad, 0x84, 0x17, 0x7b, 0x89,
	0x9f, 0xce, 0xb4, 0xc2, 0x4b, 0x58, 0x29, 0x5b, 0x49, 0x6d, 0x32, 0xad, 0xc4, 0xcc, 0xc1, 0xcb,
	0x01, 0xb8, 0x53, 0xf8, 0x02, 0xa0, 0x68, 0x48, 0x32, 0xa9, 0x4c, 0xb2, 0xf0, 0x1d, 0xbb, 0x3a,
	0x22, 0x57, 0x8c, 0xaf, 0x7f, 0xd3, 0x79, 0x2f, 0xe6, 0xb1, 0x97, 0x84, 0xdb, 0xf3, 0xcd, 0xd0,
	0x66, 0xb3, 0xb3, 0xf6, 0x6b, 0x57, 0x9f, 0xe4, 0xd7, 0xfd, 0x21, 0xad, 0xab, 0xd5, 0x98, 0xb6,
	0x18, 0xd2, 0x8e, 0xc8, 0x90, 0x36, 0xd2, 0x79, 0x2f, 0x82, 0xe9, 0xb4, 0xa3, 0xe2, 0xba, 0x47,
	0x84, 0xb9, 0x91, 0x15, 0x89, 0xb3, 0xd8, 0x4b, 0x56, 0xa9, 0x7b, 0xc6, 0x18, 0x42, 0x45, 0x6d,
	0xd1, 0xe8, 0x9a, 0xb5, 0x35, 0x62, 0xe9, 0xa8, 0xfb, 0x10, 0xbe, 0x82, 0xa0, 0x2d, 0xbe, 0x50,
	0x45, 0x62, 0x35, 0xb9, 0xe0, 0xc8, 0xa2, 0x80, 0xb3, 0x5a, 0x32, 0x53, 0x63, 0x04, 0xb8, 0x94,
	0x71, 0xc4, 0x08, 0x96, 0x75, 0xa3, 0x6d, 0xa3, 0xb9, 0x17, 0x61, 0xec, 0x25, 0x8b, 0xf4, 0x34,
	0xe3, 0x53, 0x58, 0x28, 0xca, 0xbb, 0xbd, 0x78, 0x1c, 0x7b, 0xc9, 0x32, 0x1d, 0x86, 0x83, 0x43,
	0xe9, 0x56, 0xe6, 0x25, 0x29, 0xf1, 0xc4, 0x11, 0xa7, 0x79, 0xbd, 0x83, 0xe7, 0x3b, 0xdd, 0xf2,
	0xd4, 0xa5, 0xde, 0xc0, 0x42, 0x33, 0x55, 0xad, 0xf0, 0x62, 0x3f, 0x09, 0xb7, 0x97, 0x63, 0xd3,
	0x09, 0x6d, 0x3a, 0x28, 0xb7, 0x3f, 0x67, 0xf0, 0x6c, 0x82, 0xbe, 0xaa, 0x35, 0xde, 0x42, 0x70,
	0xe3, 0x2e, 0x81, 0x0f, 0x05, 0x45, 0x0f, 0x91, 0xeb, 0x47, 0xf8, 0x01, 0xe6, 0x87, 0xba, 0x78,
	0x71, 0xfa, 0x6c, 0x87, 0xf2, 0xf4, 0xad, 0xa3, 0x96, 0xa3, 0x97, 0x7f, 0x80, 0x93, 0xfe, 0x77,
	0xe0, 0x7f, 0xa4, 0x7b, 0xf6, 0x3b, 0xa6, 0x6a, 0xb4, 0xff, 0x65, 0xf5, 0x2d, 0x04, 0x9f, 0xdd,
	0xf1, 0xff, 0xeb, 0x05, 0xde, 0x43, 0x90, 0x52, 0x65, 0xbf, 0xd3, 0xbf, 0x74, 0xc8, 0x03, 0xf7,
	0x6f, 0xbd, 0xfd, 0x15, 0x00, 0x00, 0xff, 0xff, 0x66, 0xe0, 0x01, 0xbd, 0x8e, 0x03, 0x00, 0x00,
}
