// Code generated by protoc-gen-go. DO NOT EDIT.
// source: queue.proto

package engine

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Queue struct {
	Id                   int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DomainId             int64             `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	CreatedAt            int64             `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy            *Lookup           `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedAt            int64             `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy            *Lookup           `protobuf:"bytes,6,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Strategy             string            `protobuf:"bytes,7,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Enabled              bool              `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Payload              *_struct.Value    `protobuf:"bytes,9,opt,name=payload,proto3" json:"payload,omitempty"`
	Calendar             *Lookup           `protobuf:"bytes,10,opt,name=calendar,proto3" json:"calendar,omitempty"`
	Priority             int32             `protobuf:"varint,11,opt,name=priority,proto3" json:"priority,omitempty"`
	MaxCalls             int32             `protobuf:"varint,12,opt,name=max_calls,json=maxCalls,proto3" json:"max_calls,omitempty"`
	SecBetweenRetries    int32             `protobuf:"varint,13,opt,name=sec_between_retries,json=secBetweenRetries,proto3" json:"sec_between_retries,omitempty"`
	Name                 string            `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
	MaxOfRetry           int32             `protobuf:"varint,15,opt,name=max_of_retry,json=maxOfRetry,proto3" json:"max_of_retry,omitempty"`
	Variables            map[string]string `protobuf:"bytes,16,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timeout              int32             `protobuf:"varint,17,opt,name=timeout,proto3" json:"timeout,omitempty"`
	DncList              *Lookup           `protobuf:"bytes,18,opt,name=dnc_list,json=dncList,proto3" json:"dnc_list,omitempty"`
	SecLocateAgent       int32             `protobuf:"varint,19,opt,name=sec_locate_agent,json=secLocateAgent,proto3" json:"sec_locate_agent,omitempty"`
	Type                 int32             `protobuf:"varint,20,opt,name=type,proto3" json:"type,omitempty"`
	Team                 *Lookup           `protobuf:"bytes,21,opt,name=team,proto3" json:"team,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Queue) Reset()         { *m = Queue{} }
func (m *Queue) String() string { return proto.CompactTextString(m) }
func (*Queue) ProtoMessage()    {}
func (*Queue) Descriptor() ([]byte, []int) {
	return fileDescriptor_96e4d7d76a734cd8, []int{0}
}

func (m *Queue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Queue.Unmarshal(m, b)
}
func (m *Queue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Queue.Marshal(b, m, deterministic)
}
func (m *Queue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Queue.Merge(m, src)
}
func (m *Queue) XXX_Size() int {
	return xxx_messageInfo_Queue.Size(m)
}
func (m *Queue) XXX_DiscardUnknown() {
	xxx_messageInfo_Queue.DiscardUnknown(m)
}

var xxx_messageInfo_Queue proto.InternalMessageInfo

func (m *Queue) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Queue) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *Queue) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Queue) GetCreatedBy() *Lookup {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *Queue) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Queue) GetUpdatedBy() *Lookup {
	if m != nil {
		return m.UpdatedBy
	}
	return nil
}

func (m *Queue) GetStrategy() string {
	if m != nil {
		return m.Strategy
	}
	return ""
}

func (m *Queue) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Queue) GetPayload() *_struct.Value {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Queue) GetCalendar() *Lookup {
	if m != nil {
		return m.Calendar
	}
	return nil
}

func (m *Queue) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Queue) GetMaxCalls() int32 {
	if m != nil {
		return m.MaxCalls
	}
	return 0
}

func (m *Queue) GetSecBetweenRetries() int32 {
	if m != nil {
		return m.SecBetweenRetries
	}
	return 0
}

func (m *Queue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Queue) GetMaxOfRetry() int32 {
	if m != nil {
		return m.MaxOfRetry
	}
	return 0
}

func (m *Queue) GetVariables() map[string]string {
	if m != nil {
		return m.Variables
	}
	return nil
}

func (m *Queue) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Queue) GetDncList() *Lookup {
	if m != nil {
		return m.DncList
	}
	return nil
}

func (m *Queue) GetSecLocateAgent() int32 {
	if m != nil {
		return m.SecLocateAgent
	}
	return 0
}

func (m *Queue) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Queue) GetTeam() *Lookup {
	if m != nil {
		return m.Team
	}
	return nil
}

type ListQueue struct {
	Items                []*Queue `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListQueue) Reset()         { *m = ListQueue{} }
func (m *ListQueue) String() string { return proto.CompactTextString(m) }
func (*ListQueue) ProtoMessage()    {}
func (*ListQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_96e4d7d76a734cd8, []int{1}
}

func (m *ListQueue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListQueue.Unmarshal(m, b)
}
func (m *ListQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListQueue.Marshal(b, m, deterministic)
}
func (m *ListQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListQueue.Merge(m, src)
}
func (m *ListQueue) XXX_Size() int {
	return xxx_messageInfo_ListQueue.Size(m)
}
func (m *ListQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_ListQueue.DiscardUnknown(m)
}

var xxx_messageInfo_ListQueue proto.InternalMessageInfo

func (m *ListQueue) GetItems() []*Queue {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*Queue)(nil), "engine.Queue")
	proto.RegisterMapType((map[string]string)(nil), "engine.Queue.VariablesEntry")
	proto.RegisterType((*ListQueue)(nil), "engine.ListQueue")
}

func init() { proto.RegisterFile("queue.proto", fileDescriptor_96e4d7d76a734cd8) }

var fileDescriptor_96e4d7d76a734cd8 = []byte{
	// 609 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x5d, 0x6b, 0xd4, 0x40,
	0x14, 0x35, 0xfb, 0x91, 0x4d, 0xee, 0xb6, 0x6b, 0x3b, 0xad, 0x32, 0xac, 0x15, 0xc2, 0xfa, 0x12,
	0x15, 0xd3, 0x52, 0x5f, 0xa4, 0xf8, 0xd2, 0x16, 0x91, 0x42, 0x41, 0x0c, 0xd8, 0xd7, 0x30, 0x9b,
	0xdc, 0x2e, 0x43, 0x93, 0x4c, 0x9a, 0x99, 0xd4, 0xcd, 0xff, 0xf1, 0xef, 0xf9, 0x1f, 0x64, 0x66,
	0x36, 0xdb, 0x2e, 0x2e, 0xe8, 0x5b, 0xce, 0x39, 0xf7, 0x9e, 0xb9, 0xf7, 0x64, 0x06, 0xc6, 0xf7,
	0x0d, 0x36, 0x18, 0x55, 0xb5, 0x50, 0x82, 0xb8, 0x58, 0x2e, 0x78, 0x89, 0xd3, 0x71, 0x2a, 0x4a,
	0xa9, 0x2c, 0x39, 0x3d, 0x5a, 0x08, 0xb1, 0xc8, 0xf1, 0xd8, 0xa0, 0x79, 0x73, 0x7b, 0x2c, 0x55,
	0xdd, 0xa4, 0x2b, 0x75, 0xf6, 0xcb, 0x85, 0xe1, 0x77, 0x6d, 0x41, 0x26, 0xd0, 0xe3, 0x19, 0x75,
	0x02, 0x27, 0xec, 0xc7, 0x3d, 0x9e, 0x91, 0x57, 0xe0, 0x67, 0xa2, 0x60, 0xbc, 0x4c, 0x78, 0x46,
	0x7b, 0x86, 0xf6, 0x2c, 0x71, 0x95, 0x91, 0xd7, 0x00, 0x69, 0x8d, 0x4c, 0x61, 0x96, 0x30, 0x45,
	0xfb, 0x46, 0xf5, 0x57, 0xcc, 0xb9, 0x22, 0x1f, 0x1e, 0xe5, 0x79, 0x4b, 0x07, 0x81, 0x13, 0x8e,
	0x4f, 0x27, 0x91, 0x9d, 0x2e, 0xba, 0x16, 0xe2, 0xae, 0xa9, 0xd6, 0xe5, 0x17, 0xad, 0x76, 0x6b,
	0xaa, 0xac, 0x73, 0x1b, 0x5a, 0xb7, 0x15, 0x63, 0xdd, 0x3a, 0x79, 0xde, 0x52, 0x77, 0xbb, 0xdb,
	0xaa, 0xe2, 0xa2, 0x25, 0x53, 0xf0, 0xa4, 0xaa, 0x99, 0xc2, 0x45, 0x4b, 0x47, 0x81, 0x13, 0xfa,
	0xf1, 0x1a, 0x13, 0x0a, 0x23, 0x2c, 0xd9, 0x3c, 0xc7, 0x8c, 0x7a, 0x81, 0x13, 0x7a, 0x71, 0x07,
	0xc9, 0x09, 0x8c, 0x2a, 0xd6, 0xe6, 0x82, 0x65, 0xd4, 0x37, 0x27, 0xbc, 0x8c, 0x6c, 0x70, 0x51,
	0x17, 0x5c, 0x74, 0xc3, 0xf2, 0x06, 0xe3, 0xae, 0x8c, 0xbc, 0x03, 0x2f, 0x65, 0x39, 0x96, 0x19,
	0xab, 0x29, 0x6c, 0x1d, 0x6a, 0xad, 0xeb, 0x99, 0xaa, 0x9a, 0x8b, 0x9a, 0xab, 0x96, 0x8e, 0x03,
	0x27, 0x1c, 0xc6, 0x6b, 0xac, 0x83, 0x2e, 0xd8, 0x32, 0x49, 0x59, 0x9e, 0x4b, 0xba, 0x63, 0xc5,
	0x82, 0x2d, 0x2f, 0x35, 0x26, 0x11, 0x1c, 0x48, 0x4c, 0x93, 0x39, 0xaa, 0x9f, 0x88, 0x65, 0x52,
	0xa3, 0xaa, 0x39, 0x4a, 0xba, 0x6b, 0xca, 0xf6, 0x25, 0xa6, 0x17, 0x56, 0x89, 0xad, 0x40, 0x08,
	0x0c, 0x4a, 0x56, 0x20, 0x9d, 0x98, 0xc5, 0xcd, 0x37, 0x09, 0x60, 0x47, 0x1f, 0x20, 0x6e, 0x4d,
	0x7b, 0x4b, 0x9f, 0x9b, 0x66, 0x28, 0xd8, 0xf2, 0xdb, 0xad, 0xee, 0x6b, 0xc9, 0x19, 0xf8, 0x0f,
	0xac, 0xe6, 0x3a, 0x09, 0x49, 0xf7, 0x82, 0x7e, 0x38, 0x3e, 0x3d, 0xea, 0x76, 0x31, 0xb7, 0x23,
	0xba, 0xe9, 0xe4, 0x2f, 0xa5, 0xaa, 0xdb, 0xf8, 0xb1, 0x5c, 0x47, 0xaa, 0x78, 0x81, 0xa2, 0x51,
	0x74, 0xdf, 0x18, 0x77, 0x90, 0xbc, 0x05, 0x2f, 0x2b, 0xd3, 0x24, 0xe7, 0x52, 0x51, 0xb2, 0x35,
	0xa0, 0x51, 0x56, 0xa6, 0xd7, 0x5c, 0x2a, 0x12, 0xc2, 0x9e, 0x5e, 0x33, 0x17, 0x29, 0x53, 0x98,
	0xb0, 0x05, 0x96, 0x8a, 0x1e, 0x18, 0xb7, 0x89, 0xc4, 0xf4, 0xda, 0xd0, 0xe7, 0x9a, 0xd5, 0x0b,
	0xaa, 0xb6, 0x42, 0x7a, 0x68, 0x54, 0xf3, 0x4d, 0x66, 0x30, 0x50, 0xc8, 0x0a, 0xfa, 0x62, 0xeb,
	0x21, 0x46, 0x9b, 0x7e, 0x86, 0xc9, 0xe6, 0x0e, 0x64, 0x0f, 0xfa, 0x77, 0xd8, 0x9a, 0x1b, 0xef,
	0xc7, 0xfa, 0x93, 0x1c, 0xc2, 0xf0, 0x41, 0xff, 0x63, 0x73, 0xdd, 0xfd, 0xd8, 0x82, 0xb3, 0xde,
	0x27, 0x67, 0x76, 0x02, 0xbe, 0x9e, 0xd3, 0xbe, 0x94, 0x37, 0x30, 0xe4, 0x0a, 0x0b, 0x49, 0x1d,
	0x93, 0xd4, 0xee, 0x46, 0x52, 0xb1, 0xd5, 0x4e, 0x7f, 0x3b, 0xe0, 0x19, 0xe2, 0xbc, 0xe2, 0x24,
	0x04, 0xf7, 0xd2, 0xdc, 0x76, 0xb2, 0x59, 0x3c, 0xdd, 0x84, 0xb3, 0x67, 0xe4, 0x04, 0x06, 0x26,
	0x90, 0x83, 0xf5, 0x12, 0x5c, 0xaa, 0x18, 0xef, 0x1b, 0x94, 0x6a, 0xba, 0xff, 0x94, 0xec, 0x3a,
	0xde, 0x43, 0xff, 0x2b, 0x3e, 0x69, 0xb8, 0x52, 0x58, 0x74, 0x0d, 0x7f, 0xd9, 0x87, 0xe0, 0xfe,
	0x30, 0x0f, 0xe5, 0x9f, 0x83, 0x44, 0xe0, 0xc6, 0x58, 0x88, 0x07, 0xfc, 0x3f, 0xe7, 0xb9, 0x6b,
	0x9e, 0xc9, 0xc7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb4, 0xdb, 0xa2, 0xcc, 0x91, 0x04, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueueApiClient is the client API for QueueApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueueApiClient interface {
	// POST /call_center/queue
	Create(ctx context.Context, in *Queue, opts ...grpc.CallOption) (*Queue, error)
	// GET /call_center/queue
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListQueue, error)
	// GET /call_center/queue/:id
	Get(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*Queue, error)
	// PUT /call_center/queue/:id
	Update(ctx context.Context, in *Queue, opts ...grpc.CallOption) (*Queue, error)
	// DELETE /call_center/queue/:id
	Remove(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*Queue, error)
}

type queueApiClient struct {
	cc *grpc.ClientConn
}

func NewQueueApiClient(cc *grpc.ClientConn) QueueApiClient {
	return &queueApiClient{cc}
}

func (c *queueApiClient) Create(ctx context.Context, in *Queue, opts ...grpc.CallOption) (*Queue, error) {
	out := new(Queue)
	err := c.cc.Invoke(ctx, "/engine.QueueApi/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueApiClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListQueue, error) {
	out := new(ListQueue)
	err := c.cc.Invoke(ctx, "/engine.QueueApi/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueApiClient) Get(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*Queue, error) {
	out := new(Queue)
	err := c.cc.Invoke(ctx, "/engine.QueueApi/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueApiClient) Update(ctx context.Context, in *Queue, opts ...grpc.CallOption) (*Queue, error) {
	out := new(Queue)
	err := c.cc.Invoke(ctx, "/engine.QueueApi/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueApiClient) Remove(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*Queue, error) {
	out := new(Queue)
	err := c.cc.Invoke(ctx, "/engine.QueueApi/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueApiServer is the server API for QueueApi service.
type QueueApiServer interface {
	// POST /call_center/queue
	Create(context.Context, *Queue) (*Queue, error)
	// GET /call_center/queue
	List(context.Context, *ListRequest) (*ListQueue, error)
	// GET /call_center/queue/:id
	Get(context.Context, *ItemRequest) (*Queue, error)
	// PUT /call_center/queue/:id
	Update(context.Context, *Queue) (*Queue, error)
	// DELETE /call_center/queue/:id
	Remove(context.Context, *ItemRequest) (*Queue, error)
}

// UnimplementedQueueApiServer can be embedded to have forward compatible implementations.
type UnimplementedQueueApiServer struct {
}

func (*UnimplementedQueueApiServer) Create(ctx context.Context, req *Queue) (*Queue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedQueueApiServer) List(ctx context.Context, req *ListRequest) (*ListQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedQueueApiServer) Get(ctx context.Context, req *ItemRequest) (*Queue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedQueueApiServer) Update(ctx context.Context, req *Queue) (*Queue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedQueueApiServer) Remove(ctx context.Context, req *ItemRequest) (*Queue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}

func RegisterQueueApiServer(s *grpc.Server, srv QueueApiServer) {
	s.RegisterService(&_QueueApi_serviceDesc, srv)
}

func _QueueApi_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Queue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueApiServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.QueueApi/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueApiServer).Create(ctx, req.(*Queue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueApi_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueApiServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.QueueApi/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueApiServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueApi_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueApiServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.QueueApi/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueApiServer).Get(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueApi_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Queue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueApiServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.QueueApi/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueApiServer).Update(ctx, req.(*Queue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueApi_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueApiServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.QueueApi/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueApiServer).Remove(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueueApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "engine.QueueApi",
	HandlerType: (*QueueApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _QueueApi_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _QueueApi_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _QueueApi_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _QueueApi_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _QueueApi_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "queue.proto",
}
