// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calendar.proto

package engine

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DeleteExceptDateRequest struct {
	DomainId             int64    `protobuf:"varint,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	CalendarId           int64    `protobuf:"varint,2,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	Id                   int64    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteExceptDateRequest) Reset()         { *m = DeleteExceptDateRequest{} }
func (m *DeleteExceptDateRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteExceptDateRequest) ProtoMessage()    {}
func (*DeleteExceptDateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{0}
}

func (m *DeleteExceptDateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteExceptDateRequest.Unmarshal(m, b)
}
func (m *DeleteExceptDateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteExceptDateRequest.Marshal(b, m, deterministic)
}
func (m *DeleteExceptDateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteExceptDateRequest.Merge(m, src)
}
func (m *DeleteExceptDateRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteExceptDateRequest.Size(m)
}
func (m *DeleteExceptDateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteExceptDateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteExceptDateRequest proto.InternalMessageInfo

func (m *DeleteExceptDateRequest) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *DeleteExceptDateRequest) GetCalendarId() int64 {
	if m != nil {
		return m.CalendarId
	}
	return 0
}

func (m *DeleteExceptDateRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateExceptDateRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CalendarId           int64    `protobuf:"varint,2,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Date                 int64    `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	Repeat               int32    `protobuf:"varint,5,opt,name=repeat,proto3" json:"repeat,omitempty"`
	Disabled             bool     `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	DomainId             int64    `protobuf:"varint,7,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateExceptDateRequest) Reset()         { *m = UpdateExceptDateRequest{} }
func (m *UpdateExceptDateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateExceptDateRequest) ProtoMessage()    {}
func (*UpdateExceptDateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{1}
}

func (m *UpdateExceptDateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateExceptDateRequest.Unmarshal(m, b)
}
func (m *UpdateExceptDateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateExceptDateRequest.Marshal(b, m, deterministic)
}
func (m *UpdateExceptDateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateExceptDateRequest.Merge(m, src)
}
func (m *UpdateExceptDateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateExceptDateRequest.Size(m)
}
func (m *UpdateExceptDateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateExceptDateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateExceptDateRequest proto.InternalMessageInfo

func (m *UpdateExceptDateRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateExceptDateRequest) GetCalendarId() int64 {
	if m != nil {
		return m.CalendarId
	}
	return 0
}

func (m *UpdateExceptDateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateExceptDateRequest) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateExceptDateRequest) GetRepeat() int32 {
	if m != nil {
		return m.Repeat
	}
	return 0
}

func (m *UpdateExceptDateRequest) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *UpdateExceptDateRequest) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

type SearchExceptDateRequest struct {
	CalendarId           int64    `protobuf:"varint,1,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	DomainId             int64    `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchExceptDateRequest) Reset()         { *m = SearchExceptDateRequest{} }
func (m *SearchExceptDateRequest) String() string { return proto.CompactTextString(m) }
func (*SearchExceptDateRequest) ProtoMessage()    {}
func (*SearchExceptDateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{2}
}

func (m *SearchExceptDateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchExceptDateRequest.Unmarshal(m, b)
}
func (m *SearchExceptDateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchExceptDateRequest.Marshal(b, m, deterministic)
}
func (m *SearchExceptDateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchExceptDateRequest.Merge(m, src)
}
func (m *SearchExceptDateRequest) XXX_Size() int {
	return xxx_messageInfo_SearchExceptDateRequest.Size(m)
}
func (m *SearchExceptDateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchExceptDateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchExceptDateRequest proto.InternalMessageInfo

func (m *SearchExceptDateRequest) GetCalendarId() int64 {
	if m != nil {
		return m.CalendarId
	}
	return 0
}

func (m *SearchExceptDateRequest) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

type ListExceptDate struct {
	Items                []*ExceptDate `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListExceptDate) Reset()         { *m = ListExceptDate{} }
func (m *ListExceptDate) String() string { return proto.CompactTextString(m) }
func (*ListExceptDate) ProtoMessage()    {}
func (*ListExceptDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{3}
}

func (m *ListExceptDate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListExceptDate.Unmarshal(m, b)
}
func (m *ListExceptDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListExceptDate.Marshal(b, m, deterministic)
}
func (m *ListExceptDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListExceptDate.Merge(m, src)
}
func (m *ListExceptDate) XXX_Size() int {
	return xxx_messageInfo_ListExceptDate.Size(m)
}
func (m *ListExceptDate) XXX_DiscardUnknown() {
	xxx_messageInfo_ListExceptDate.DiscardUnknown(m)
}

var xxx_messageInfo_ListExceptDate proto.InternalMessageInfo

func (m *ListExceptDate) GetItems() []*ExceptDate {
	if m != nil {
		return m.Items
	}
	return nil
}

type ReadExceptDateRequest struct {
	DomainId             int64    `protobuf:"varint,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	CalendarId           int64    `protobuf:"varint,2,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	Id                   int64    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadExceptDateRequest) Reset()         { *m = ReadExceptDateRequest{} }
func (m *ReadExceptDateRequest) String() string { return proto.CompactTextString(m) }
func (*ReadExceptDateRequest) ProtoMessage()    {}
func (*ReadExceptDateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{4}
}

func (m *ReadExceptDateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadExceptDateRequest.Unmarshal(m, b)
}
func (m *ReadExceptDateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadExceptDateRequest.Marshal(b, m, deterministic)
}
func (m *ReadExceptDateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadExceptDateRequest.Merge(m, src)
}
func (m *ReadExceptDateRequest) XXX_Size() int {
	return xxx_messageInfo_ReadExceptDateRequest.Size(m)
}
func (m *ReadExceptDateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadExceptDateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadExceptDateRequest proto.InternalMessageInfo

func (m *ReadExceptDateRequest) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *ReadExceptDateRequest) GetCalendarId() int64 {
	if m != nil {
		return m.CalendarId
	}
	return 0
}

func (m *ReadExceptDateRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CreateExceptDateRequest struct {
	DomainId             int64    `protobuf:"varint,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	CalendarId           int64    `protobuf:"varint,2,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Date                 int64    `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	Repeat               int32    `protobuf:"varint,5,opt,name=repeat,proto3" json:"repeat,omitempty"`
	Disabled             bool     `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateExceptDateRequest) Reset()         { *m = CreateExceptDateRequest{} }
func (m *CreateExceptDateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateExceptDateRequest) ProtoMessage()    {}
func (*CreateExceptDateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{5}
}

func (m *CreateExceptDateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateExceptDateRequest.Unmarshal(m, b)
}
func (m *CreateExceptDateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateExceptDateRequest.Marshal(b, m, deterministic)
}
func (m *CreateExceptDateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateExceptDateRequest.Merge(m, src)
}
func (m *CreateExceptDateRequest) XXX_Size() int {
	return xxx_messageInfo_CreateExceptDateRequest.Size(m)
}
func (m *CreateExceptDateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateExceptDateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateExceptDateRequest proto.InternalMessageInfo

func (m *CreateExceptDateRequest) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *CreateExceptDateRequest) GetCalendarId() int64 {
	if m != nil {
		return m.CalendarId
	}
	return 0
}

func (m *CreateExceptDateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateExceptDateRequest) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *CreateExceptDateRequest) GetRepeat() int32 {
	if m != nil {
		return m.Repeat
	}
	return 0
}

func (m *CreateExceptDateRequest) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

type ExceptDate struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CalendarId           int64    `protobuf:"varint,2,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Date                 int64    `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	Repeat               int32    `protobuf:"varint,5,opt,name=repeat,proto3" json:"repeat,omitempty"`
	Disabled             bool     `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExceptDate) Reset()         { *m = ExceptDate{} }
func (m *ExceptDate) String() string { return proto.CompactTextString(m) }
func (*ExceptDate) ProtoMessage()    {}
func (*ExceptDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{6}
}

func (m *ExceptDate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExceptDate.Unmarshal(m, b)
}
func (m *ExceptDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExceptDate.Marshal(b, m, deterministic)
}
func (m *ExceptDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExceptDate.Merge(m, src)
}
func (m *ExceptDate) XXX_Size() int {
	return xxx_messageInfo_ExceptDate.Size(m)
}
func (m *ExceptDate) XXX_DiscardUnknown() {
	xxx_messageInfo_ExceptDate.DiscardUnknown(m)
}

var xxx_messageInfo_ExceptDate proto.InternalMessageInfo

func (m *ExceptDate) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ExceptDate) GetCalendarId() int64 {
	if m != nil {
		return m.CalendarId
	}
	return 0
}

func (m *ExceptDate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExceptDate) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ExceptDate) GetRepeat() int32 {
	if m != nil {
		return m.Repeat
	}
	return 0
}

func (m *ExceptDate) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

type ListCalendar struct {
	Items                []*Calendar `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListCalendar) Reset()         { *m = ListCalendar{} }
func (m *ListCalendar) String() string { return proto.CompactTextString(m) }
func (*ListCalendar) ProtoMessage()    {}
func (*ListCalendar) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{7}
}

func (m *ListCalendar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCalendar.Unmarshal(m, b)
}
func (m *ListCalendar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCalendar.Marshal(b, m, deterministic)
}
func (m *ListCalendar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCalendar.Merge(m, src)
}
func (m *ListCalendar) XXX_Size() int {
	return xxx_messageInfo_ListCalendar.Size(m)
}
func (m *ListCalendar) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCalendar.DiscardUnknown(m)
}

var xxx_messageInfo_ListCalendar proto.InternalMessageInfo

func (m *ListCalendar) GetItems() []*Calendar {
	if m != nil {
		return m.Items
	}
	return nil
}

type Calendar struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DomainId             int64    `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	CreatedAt            int64    `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy            *Lookup  `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy            *Lookup  `protobuf:"bytes,6,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Name                 string   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Start                int64    `protobuf:"varint,8,opt,name=start,proto3" json:"start,omitempty"`
	Finish               int64    `protobuf:"varint,9,opt,name=finish,proto3" json:"finish,omitempty"`
	Timezone             *Lookup  `protobuf:"bytes,10,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Description          string   `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Calendar) Reset()         { *m = Calendar{} }
func (m *Calendar) String() string { return proto.CompactTextString(m) }
func (*Calendar) ProtoMessage()    {}
func (*Calendar) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{8}
}

func (m *Calendar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Calendar.Unmarshal(m, b)
}
func (m *Calendar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Calendar.Marshal(b, m, deterministic)
}
func (m *Calendar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Calendar.Merge(m, src)
}
func (m *Calendar) XXX_Size() int {
	return xxx_messageInfo_Calendar.Size(m)
}
func (m *Calendar) XXX_DiscardUnknown() {
	xxx_messageInfo_Calendar.DiscardUnknown(m)
}

var xxx_messageInfo_Calendar proto.InternalMessageInfo

func (m *Calendar) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Calendar) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *Calendar) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Calendar) GetCreatedBy() *Lookup {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *Calendar) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Calendar) GetUpdatedBy() *Lookup {
	if m != nil {
		return m.UpdatedBy
	}
	return nil
}

func (m *Calendar) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Calendar) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Calendar) GetFinish() int64 {
	if m != nil {
		return m.Finish
	}
	return 0
}

func (m *Calendar) GetTimezone() *Lookup {
	if m != nil {
		return m.Timezone
	}
	return nil
}

func (m *Calendar) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type ReadAcceptOfDayRequest struct {
	DomainId             int64    `protobuf:"varint,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	CalendarId           int64    `protobuf:"varint,2,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	Id                   int64    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadAcceptOfDayRequest) Reset()         { *m = ReadAcceptOfDayRequest{} }
func (m *ReadAcceptOfDayRequest) String() string { return proto.CompactTextString(m) }
func (*ReadAcceptOfDayRequest) ProtoMessage()    {}
func (*ReadAcceptOfDayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{9}
}

func (m *ReadAcceptOfDayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadAcceptOfDayRequest.Unmarshal(m, b)
}
func (m *ReadAcceptOfDayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadAcceptOfDayRequest.Marshal(b, m, deterministic)
}
func (m *ReadAcceptOfDayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadAcceptOfDayRequest.Merge(m, src)
}
func (m *ReadAcceptOfDayRequest) XXX_Size() int {
	return xxx_messageInfo_ReadAcceptOfDayRequest.Size(m)
}
func (m *ReadAcceptOfDayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadAcceptOfDayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadAcceptOfDayRequest proto.InternalMessageInfo

func (m *ReadAcceptOfDayRequest) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *ReadAcceptOfDayRequest) GetCalendarId() int64 {
	if m != nil {
		return m.CalendarId
	}
	return 0
}

func (m *ReadAcceptOfDayRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteAcceptOfDayRequest struct {
	DomainId             int64    `protobuf:"varint,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	CalendarId           int64    `protobuf:"varint,2,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	Id                   int64    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAcceptOfDayRequest) Reset()         { *m = DeleteAcceptOfDayRequest{} }
func (m *DeleteAcceptOfDayRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAcceptOfDayRequest) ProtoMessage()    {}
func (*DeleteAcceptOfDayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{10}
}

func (m *DeleteAcceptOfDayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteAcceptOfDayRequest.Unmarshal(m, b)
}
func (m *DeleteAcceptOfDayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteAcceptOfDayRequest.Marshal(b, m, deterministic)
}
func (m *DeleteAcceptOfDayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAcceptOfDayRequest.Merge(m, src)
}
func (m *DeleteAcceptOfDayRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteAcceptOfDayRequest.Size(m)
}
func (m *DeleteAcceptOfDayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAcceptOfDayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAcceptOfDayRequest proto.InternalMessageInfo

func (m *DeleteAcceptOfDayRequest) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *DeleteAcceptOfDayRequest) GetCalendarId() int64 {
	if m != nil {
		return m.CalendarId
	}
	return 0
}

func (m *DeleteAcceptOfDayRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CreateCalendarRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Start                int64    `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	Finish               int64    `protobuf:"varint,3,opt,name=finish,proto3" json:"finish,omitempty"`
	Timezone             *Lookup  `protobuf:"bytes,4,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Description          string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	DomainId             int64    `protobuf:"varint,6,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateCalendarRequest) Reset()         { *m = CreateCalendarRequest{} }
func (m *CreateCalendarRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCalendarRequest) ProtoMessage()    {}
func (*CreateCalendarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{11}
}

func (m *CreateCalendarRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCalendarRequest.Unmarshal(m, b)
}
func (m *CreateCalendarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCalendarRequest.Marshal(b, m, deterministic)
}
func (m *CreateCalendarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCalendarRequest.Merge(m, src)
}
func (m *CreateCalendarRequest) XXX_Size() int {
	return xxx_messageInfo_CreateCalendarRequest.Size(m)
}
func (m *CreateCalendarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCalendarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCalendarRequest proto.InternalMessageInfo

func (m *CreateCalendarRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateCalendarRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *CreateCalendarRequest) GetFinish() int64 {
	if m != nil {
		return m.Finish
	}
	return 0
}

func (m *CreateCalendarRequest) GetTimezone() *Lookup {
	if m != nil {
		return m.Timezone
	}
	return nil
}

func (m *CreateCalendarRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateCalendarRequest) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

type SearchCalendarRequest struct {
	DomainId             int64    `protobuf:"varint,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Size                 int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Page                 int32    `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchCalendarRequest) Reset()         { *m = SearchCalendarRequest{} }
func (m *SearchCalendarRequest) String() string { return proto.CompactTextString(m) }
func (*SearchCalendarRequest) ProtoMessage()    {}
func (*SearchCalendarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{12}
}

func (m *SearchCalendarRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchCalendarRequest.Unmarshal(m, b)
}
func (m *SearchCalendarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchCalendarRequest.Marshal(b, m, deterministic)
}
func (m *SearchCalendarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchCalendarRequest.Merge(m, src)
}
func (m *SearchCalendarRequest) XXX_Size() int {
	return xxx_messageInfo_SearchCalendarRequest.Size(m)
}
func (m *SearchCalendarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchCalendarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchCalendarRequest proto.InternalMessageInfo

func (m *SearchCalendarRequest) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *SearchCalendarRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *SearchCalendarRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ReadCalendarRequest struct {
	DomainId             int64    `protobuf:"varint,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadCalendarRequest) Reset()         { *m = ReadCalendarRequest{} }
func (m *ReadCalendarRequest) String() string { return proto.CompactTextString(m) }
func (*ReadCalendarRequest) ProtoMessage()    {}
func (*ReadCalendarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{13}
}

func (m *ReadCalendarRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadCalendarRequest.Unmarshal(m, b)
}
func (m *ReadCalendarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadCalendarRequest.Marshal(b, m, deterministic)
}
func (m *ReadCalendarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadCalendarRequest.Merge(m, src)
}
func (m *ReadCalendarRequest) XXX_Size() int {
	return xxx_messageInfo_ReadCalendarRequest.Size(m)
}
func (m *ReadCalendarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadCalendarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadCalendarRequest proto.InternalMessageInfo

func (m *ReadCalendarRequest) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *ReadCalendarRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteCalendarRequest struct {
	DomainId             int64    `protobuf:"varint,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCalendarRequest) Reset()         { *m = DeleteCalendarRequest{} }
func (m *DeleteCalendarRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCalendarRequest) ProtoMessage()    {}
func (*DeleteCalendarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{14}
}

func (m *DeleteCalendarRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteCalendarRequest.Unmarshal(m, b)
}
func (m *DeleteCalendarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteCalendarRequest.Marshal(b, m, deterministic)
}
func (m *DeleteCalendarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCalendarRequest.Merge(m, src)
}
func (m *DeleteCalendarRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteCalendarRequest.Size(m)
}
func (m *DeleteCalendarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCalendarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCalendarRequest proto.InternalMessageInfo

func (m *DeleteCalendarRequest) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *DeleteCalendarRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateCalendarRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Start                int64    `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	Finish               int64    `protobuf:"varint,4,opt,name=finish,proto3" json:"finish,omitempty"`
	Timezone             *Lookup  `protobuf:"bytes,5,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Description          string   `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	DomainId             int64    `protobuf:"varint,7,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateCalendarRequest) Reset()         { *m = UpdateCalendarRequest{} }
func (m *UpdateCalendarRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCalendarRequest) ProtoMessage()    {}
func (*UpdateCalendarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{15}
}

func (m *UpdateCalendarRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCalendarRequest.Unmarshal(m, b)
}
func (m *UpdateCalendarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCalendarRequest.Marshal(b, m, deterministic)
}
func (m *UpdateCalendarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCalendarRequest.Merge(m, src)
}
func (m *UpdateCalendarRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateCalendarRequest.Size(m)
}
func (m *UpdateCalendarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCalendarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCalendarRequest proto.InternalMessageInfo

func (m *UpdateCalendarRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateCalendarRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateCalendarRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *UpdateCalendarRequest) GetFinish() int64 {
	if m != nil {
		return m.Finish
	}
	return 0
}

func (m *UpdateCalendarRequest) GetTimezone() *Lookup {
	if m != nil {
		return m.Timezone
	}
	return nil
}

func (m *UpdateCalendarRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateCalendarRequest) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

type SearchTimezonesRequest struct {
	Size                 int32    `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Page                 int32    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchTimezonesRequest) Reset()         { *m = SearchTimezonesRequest{} }
func (m *SearchTimezonesRequest) String() string { return proto.CompactTextString(m) }
func (*SearchTimezonesRequest) ProtoMessage()    {}
func (*SearchTimezonesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{16}
}

func (m *SearchTimezonesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchTimezonesRequest.Unmarshal(m, b)
}
func (m *SearchTimezonesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchTimezonesRequest.Marshal(b, m, deterministic)
}
func (m *SearchTimezonesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTimezonesRequest.Merge(m, src)
}
func (m *SearchTimezonesRequest) XXX_Size() int {
	return xxx_messageInfo_SearchTimezonesRequest.Size(m)
}
func (m *SearchTimezonesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTimezonesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTimezonesRequest proto.InternalMessageInfo

func (m *SearchTimezonesRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *SearchTimezonesRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ListTimezoneResponse struct {
	Items                []*Timezone `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListTimezoneResponse) Reset()         { *m = ListTimezoneResponse{} }
func (m *ListTimezoneResponse) String() string { return proto.CompactTextString(m) }
func (*ListTimezoneResponse) ProtoMessage()    {}
func (*ListTimezoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{17}
}

func (m *ListTimezoneResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTimezoneResponse.Unmarshal(m, b)
}
func (m *ListTimezoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTimezoneResponse.Marshal(b, m, deterministic)
}
func (m *ListTimezoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTimezoneResponse.Merge(m, src)
}
func (m *ListTimezoneResponse) XXX_Size() int {
	return xxx_messageInfo_ListTimezoneResponse.Size(m)
}
func (m *ListTimezoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTimezoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTimezoneResponse proto.InternalMessageInfo

func (m *ListTimezoneResponse) GetItems() []*Timezone {
	if m != nil {
		return m.Items
	}
	return nil
}

type Timezone struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Offset               string   `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timezone) Reset()         { *m = Timezone{} }
func (m *Timezone) String() string { return proto.CompactTextString(m) }
func (*Timezone) ProtoMessage()    {}
func (*Timezone) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{18}
}

func (m *Timezone) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timezone.Unmarshal(m, b)
}
func (m *Timezone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timezone.Marshal(b, m, deterministic)
}
func (m *Timezone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timezone.Merge(m, src)
}
func (m *Timezone) XXX_Size() int {
	return xxx_messageInfo_Timezone.Size(m)
}
func (m *Timezone) XXX_DiscardUnknown() {
	xxx_messageInfo_Timezone.DiscardUnknown(m)
}

var xxx_messageInfo_Timezone proto.InternalMessageInfo

func (m *Timezone) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Timezone) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Timezone) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

type CreateAcceptOfDayRequest struct {
	CalendarId           int64    `protobuf:"varint,1,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	DomainId             int64    `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WeekDay              int32    `protobuf:"varint,3,opt,name=week_day,json=weekDay,proto3" json:"week_day,omitempty"`
	StartTimeOfDay       int32    `protobuf:"varint,4,opt,name=start_time_of_day,json=startTimeOfDay,proto3" json:"start_time_of_day,omitempty"`
	EndTimeOfDay         int32    `protobuf:"varint,5,opt,name=end_time_of_day,json=endTimeOfDay,proto3" json:"end_time_of_day,omitempty"`
	Disabled             bool     `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateAcceptOfDayRequest) Reset()         { *m = CreateAcceptOfDayRequest{} }
func (m *CreateAcceptOfDayRequest) String() string { return proto.CompactTextString(m) }
func (*CreateAcceptOfDayRequest) ProtoMessage()    {}
func (*CreateAcceptOfDayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{19}
}

func (m *CreateAcceptOfDayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateAcceptOfDayRequest.Unmarshal(m, b)
}
func (m *CreateAcceptOfDayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateAcceptOfDayRequest.Marshal(b, m, deterministic)
}
func (m *CreateAcceptOfDayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAcceptOfDayRequest.Merge(m, src)
}
func (m *CreateAcceptOfDayRequest) XXX_Size() int {
	return xxx_messageInfo_CreateAcceptOfDayRequest.Size(m)
}
func (m *CreateAcceptOfDayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAcceptOfDayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAcceptOfDayRequest proto.InternalMessageInfo

func (m *CreateAcceptOfDayRequest) GetCalendarId() int64 {
	if m != nil {
		return m.CalendarId
	}
	return 0
}

func (m *CreateAcceptOfDayRequest) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *CreateAcceptOfDayRequest) GetWeekDay() int32 {
	if m != nil {
		return m.WeekDay
	}
	return 0
}

func (m *CreateAcceptOfDayRequest) GetStartTimeOfDay() int32 {
	if m != nil {
		return m.StartTimeOfDay
	}
	return 0
}

func (m *CreateAcceptOfDayRequest) GetEndTimeOfDay() int32 {
	if m != nil {
		return m.EndTimeOfDay
	}
	return 0
}

func (m *CreateAcceptOfDayRequest) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

type UpdateAcceptOfDayRequest struct {
	CalendarId           int64    `protobuf:"varint,1,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	DomainId             int64    `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WeekDay              int32    `protobuf:"varint,3,opt,name=week_day,json=weekDay,proto3" json:"week_day,omitempty"`
	StartTimeOfDay       int32    `protobuf:"varint,4,opt,name=start_time_of_day,json=startTimeOfDay,proto3" json:"start_time_of_day,omitempty"`
	EndTimeOfDay         int32    `protobuf:"varint,5,opt,name=end_time_of_day,json=endTimeOfDay,proto3" json:"end_time_of_day,omitempty"`
	Disabled             bool     `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Id                   int64    `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAcceptOfDayRequest) Reset()         { *m = UpdateAcceptOfDayRequest{} }
func (m *UpdateAcceptOfDayRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAcceptOfDayRequest) ProtoMessage()    {}
func (*UpdateAcceptOfDayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{20}
}

func (m *UpdateAcceptOfDayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAcceptOfDayRequest.Unmarshal(m, b)
}
func (m *UpdateAcceptOfDayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAcceptOfDayRequest.Marshal(b, m, deterministic)
}
func (m *UpdateAcceptOfDayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAcceptOfDayRequest.Merge(m, src)
}
func (m *UpdateAcceptOfDayRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateAcceptOfDayRequest.Size(m)
}
func (m *UpdateAcceptOfDayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAcceptOfDayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAcceptOfDayRequest proto.InternalMessageInfo

func (m *UpdateAcceptOfDayRequest) GetCalendarId() int64 {
	if m != nil {
		return m.CalendarId
	}
	return 0
}

func (m *UpdateAcceptOfDayRequest) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *UpdateAcceptOfDayRequest) GetWeekDay() int32 {
	if m != nil {
		return m.WeekDay
	}
	return 0
}

func (m *UpdateAcceptOfDayRequest) GetStartTimeOfDay() int32 {
	if m != nil {
		return m.StartTimeOfDay
	}
	return 0
}

func (m *UpdateAcceptOfDayRequest) GetEndTimeOfDay() int32 {
	if m != nil {
		return m.EndTimeOfDay
	}
	return 0
}

func (m *UpdateAcceptOfDayRequest) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *UpdateAcceptOfDayRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type AcceptOfDay struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WeekDay              int32    `protobuf:"varint,2,opt,name=week_day,json=weekDay,proto3" json:"week_day,omitempty"`
	StartTimeOfDay       int32    `protobuf:"varint,3,opt,name=start_time_of_day,json=startTimeOfDay,proto3" json:"start_time_of_day,omitempty"`
	EndTimeOfDay         int32    `protobuf:"varint,4,opt,name=end_time_of_day,json=endTimeOfDay,proto3" json:"end_time_of_day,omitempty"`
	Disabled             bool     `protobuf:"varint,5,opt,name=disabled,proto3" json:"disabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcceptOfDay) Reset()         { *m = AcceptOfDay{} }
func (m *AcceptOfDay) String() string { return proto.CompactTextString(m) }
func (*AcceptOfDay) ProtoMessage()    {}
func (*AcceptOfDay) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{21}
}

func (m *AcceptOfDay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcceptOfDay.Unmarshal(m, b)
}
func (m *AcceptOfDay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcceptOfDay.Marshal(b, m, deterministic)
}
func (m *AcceptOfDay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptOfDay.Merge(m, src)
}
func (m *AcceptOfDay) XXX_Size() int {
	return xxx_messageInfo_AcceptOfDay.Size(m)
}
func (m *AcceptOfDay) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptOfDay.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptOfDay proto.InternalMessageInfo

func (m *AcceptOfDay) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AcceptOfDay) GetWeekDay() int32 {
	if m != nil {
		return m.WeekDay
	}
	return 0
}

func (m *AcceptOfDay) GetStartTimeOfDay() int32 {
	if m != nil {
		return m.StartTimeOfDay
	}
	return 0
}

func (m *AcceptOfDay) GetEndTimeOfDay() int32 {
	if m != nil {
		return m.EndTimeOfDay
	}
	return 0
}

func (m *AcceptOfDay) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

type AcceptOfDayRequest struct {
	CalendarId           int64    `protobuf:"varint,1,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	DomainId             int64    `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcceptOfDayRequest) Reset()         { *m = AcceptOfDayRequest{} }
func (m *AcceptOfDayRequest) String() string { return proto.CompactTextString(m) }
func (*AcceptOfDayRequest) ProtoMessage()    {}
func (*AcceptOfDayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{22}
}

func (m *AcceptOfDayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcceptOfDayRequest.Unmarshal(m, b)
}
func (m *AcceptOfDayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcceptOfDayRequest.Marshal(b, m, deterministic)
}
func (m *AcceptOfDayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptOfDayRequest.Merge(m, src)
}
func (m *AcceptOfDayRequest) XXX_Size() int {
	return xxx_messageInfo_AcceptOfDayRequest.Size(m)
}
func (m *AcceptOfDayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptOfDayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptOfDayRequest proto.InternalMessageInfo

func (m *AcceptOfDayRequest) GetCalendarId() int64 {
	if m != nil {
		return m.CalendarId
	}
	return 0
}

func (m *AcceptOfDayRequest) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

type ListAcceptOfDay struct {
	Items                []*AcceptOfDay `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListAcceptOfDay) Reset()         { *m = ListAcceptOfDay{} }
func (m *ListAcceptOfDay) String() string { return proto.CompactTextString(m) }
func (*ListAcceptOfDay) ProtoMessage()    {}
func (*ListAcceptOfDay) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{23}
}

func (m *ListAcceptOfDay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAcceptOfDay.Unmarshal(m, b)
}
func (m *ListAcceptOfDay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAcceptOfDay.Marshal(b, m, deterministic)
}
func (m *ListAcceptOfDay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAcceptOfDay.Merge(m, src)
}
func (m *ListAcceptOfDay) XXX_Size() int {
	return xxx_messageInfo_ListAcceptOfDay.Size(m)
}
func (m *ListAcceptOfDay) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAcceptOfDay.DiscardUnknown(m)
}

var xxx_messageInfo_ListAcceptOfDay proto.InternalMessageInfo

func (m *ListAcceptOfDay) GetItems() []*AcceptOfDay {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*DeleteExceptDateRequest)(nil), "engine.DeleteExceptDateRequest")
	proto.RegisterType((*UpdateExceptDateRequest)(nil), "engine.UpdateExceptDateRequest")
	proto.RegisterType((*SearchExceptDateRequest)(nil), "engine.SearchExceptDateRequest")
	proto.RegisterType((*ListExceptDate)(nil), "engine.ListExceptDate")
	proto.RegisterType((*ReadExceptDateRequest)(nil), "engine.ReadExceptDateRequest")
	proto.RegisterType((*CreateExceptDateRequest)(nil), "engine.CreateExceptDateRequest")
	proto.RegisterType((*ExceptDate)(nil), "engine.ExceptDate")
	proto.RegisterType((*ListCalendar)(nil), "engine.ListCalendar")
	proto.RegisterType((*Calendar)(nil), "engine.Calendar")
	proto.RegisterType((*ReadAcceptOfDayRequest)(nil), "engine.ReadAcceptOfDayRequest")
	proto.RegisterType((*DeleteAcceptOfDayRequest)(nil), "engine.DeleteAcceptOfDayRequest")
	proto.RegisterType((*CreateCalendarRequest)(nil), "engine.CreateCalendarRequest")
	proto.RegisterType((*SearchCalendarRequest)(nil), "engine.SearchCalendarRequest")
	proto.RegisterType((*ReadCalendarRequest)(nil), "engine.ReadCalendarRequest")
	proto.RegisterType((*DeleteCalendarRequest)(nil), "engine.DeleteCalendarRequest")
	proto.RegisterType((*UpdateCalendarRequest)(nil), "engine.UpdateCalendarRequest")
	proto.RegisterType((*SearchTimezonesRequest)(nil), "engine.SearchTimezonesRequest")
	proto.RegisterType((*ListTimezoneResponse)(nil), "engine.ListTimezoneResponse")
	proto.RegisterType((*Timezone)(nil), "engine.Timezone")
	proto.RegisterType((*CreateAcceptOfDayRequest)(nil), "engine.CreateAcceptOfDayRequest")
	proto.RegisterType((*UpdateAcceptOfDayRequest)(nil), "engine.UpdateAcceptOfDayRequest")
	proto.RegisterType((*AcceptOfDay)(nil), "engine.AcceptOfDay")
	proto.RegisterType((*AcceptOfDayRequest)(nil), "engine.AcceptOfDayRequest")
	proto.RegisterType((*ListAcceptOfDay)(nil), "engine.ListAcceptOfDay")
}

func init() { proto.RegisterFile("calendar.proto", fileDescriptor_e3d25d49f056cdb2) }

var fileDescriptor_e3d25d49f056cdb2 = []byte{
	// 1209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0xdb, 0x8e, 0xdb, 0x44,
	0x18, 0x96, 0x9d, 0x38, 0x9b, 0xfd, 0xb3, 0x38, 0xc9, 0x34, 0x07, 0xe3, 0x6e, 0x69, 0x64, 0x69,
	0x21, 0x0d, 0xea, 0x06, 0x2d, 0x12, 0x17, 0x15, 0x42, 0x74, 0x1b, 0x90, 0x2a, 0x55, 0x42, 0x72,
	0x39, 0x0b, 0x14, 0xcd, 0xc6, 0x93, 0xac, 0xd5, 0x8d, 0x1d, 0x6c, 0xa7, 0x6d, 0x0a, 0xbd, 0xe1,
	0x15, 0xb8, 0xe2, 0x05, 0x78, 0x01, 0x1e, 0x01, 0xde, 0x00, 0x5e, 0x00, 0xc1, 0x0b, 0x70, 0xc9,
	0x1d, 0xf2, 0x8c, 0x0f, 0x63, 0x7b, 0x72, 0x58, 0xb5, 0x2b, 0x21, 0xee, 0xec, 0xf1, 0x9f, 0xef,
	0x9b, 0xff, 0xff, 0xfe, 0xc3, 0x64, 0x40, 0x9d, 0xe0, 0x0b, 0xe2, 0x58, 0xd8, 0x3b, 0x5e, 0x78,
	0x6e, 0xe0, 0xa2, 0x0a, 0x71, 0x66, 0xb6, 0x43, 0xf4, 0xda, 0xc4, 0x75, 0xfc, 0x80, 0x2d, 0xea,
	0x87, 0x33, 0xd7, 0x9d, 0x5d, 0x90, 0x21, 0x5e, 0xd8, 0x43, 0xec, 0x38, 0x6e, 0x80, 0x03, 0xdb,
	0x75, 0x7c, 0xf6, 0xd5, 0x98, 0x41, 0x77, 0x44, 0x2e, 0x48, 0x40, 0x3e, 0x78, 0x3a, 0x21, 0x8b,
	0x60, 0x84, 0x03, 0x62, 0x92, 0x6f, 0x96, 0xc4, 0x0f, 0xd0, 0x75, 0xd8, 0xb7, 0xdc, 0x39, 0xb6,
	0x9d, 0xb1, 0x6d, 0x69, 0x52, 0x4f, 0xea, 0x97, 0xcc, 0x2a, 0x5b, 0xb8, 0x6f, 0xa1, 0x9b, 0x50,
	0x8b, 0xc9, 0xc3, 0xcf, 0x32, 0xfd, 0x0c, 0xf1, 0xd2, 0x7d, 0x0b, 0xa9, 0x20, 0xdb, 0x96, 0x56,
	0xa2, 0xeb, 0xb2, 0x6d, 0x19, 0xbf, 0x48, 0xd0, 0xfd, 0x64, 0x61, 0x61, 0x11, 0x13, 0xb3, 0x95,
	0x62, 0xdb, 0xed, 0xe0, 0x08, 0xca, 0x0e, 0x9e, 0x13, 0x0a, 0xbf, 0x6f, 0xd2, 0xe7, 0x70, 0x2d,
	0x44, 0xd7, 0xca, 0xd4, 0x9a, 0x3e, 0xa3, 0x0e, 0x54, 0x3c, 0xb2, 0x20, 0x38, 0xd0, 0x94, 0x9e,
	0xd4, 0x57, 0xcc, 0xe8, 0x0d, 0xe9, 0x50, 0xb5, 0x6c, 0x1f, 0x9f, 0x5d, 0x10, 0x4b, 0xab, 0xf4,
	0xa4, 0x7e, 0xd5, 0x4c, 0xde, 0xb3, 0x6e, 0xef, 0x65, 0xdd, 0x36, 0x3e, 0x83, 0xee, 0x43, 0x82,
	0xbd, 0xc9, 0x79, 0xd1, 0x89, 0xdc, 0xa6, 0xa5, 0xc2, 0xa6, 0x33, 0xc0, 0x72, 0x0e, 0xf8, 0x0e,
	0xa8, 0x0f, 0x6c, 0x3f, 0x48, 0x61, 0x51, 0x1f, 0x14, 0x3b, 0x20, 0x73, 0x5f, 0x93, 0x7a, 0xa5,
	0x7e, 0xed, 0x04, 0x1d, 0x33, 0x71, 0x8f, 0x39, 0x66, 0x66, 0x60, 0x10, 0x68, 0x9b, 0x04, 0x5b,
	0x57, 0xad, 0xe0, 0xcf, 0x12, 0x74, 0xef, 0x79, 0x04, 0xbf, 0xfc, 0x5c, 0xb9, 0x42, 0x39, 0x8d,
	0x1f, 0x25, 0x00, 0x2e, 0xaa, 0xff, 0xa5, 0x54, 0x33, 0xde, 0x81, 0x83, 0x50, 0xf4, 0x7b, 0x11,
	0x1b, 0x7a, 0x3d, 0x2b, 0x79, 0x23, 0x96, 0x3c, 0x36, 0x88, 0x05, 0xff, 0x53, 0x86, 0x6a, 0xf2,
	0xa3, 0xbc, 0x47, 0x9b, 0xd2, 0x0c, 0xdd, 0x00, 0x98, 0x50, 0x09, 0xad, 0x31, 0x0e, 0x22, 0x6d,
	0xf7, 0xa3, 0x95, 0xbb, 0x01, 0xba, 0x9d, 0x7e, 0x3e, 0x5b, 0x51, 0xf7, 0x6a, 0x27, 0x6a, 0xbc,
	0x8b, 0x07, 0xae, 0xfb, 0x68, 0xb9, 0x48, 0xcc, 0x4f, 0x57, 0x21, 0xda, 0x92, 0x96, 0x34, 0x45,
	0x53, 0x18, 0x5a, 0xb4, 0xc2, 0xd0, 0xe2, 0xcf, 0x67, 0x2b, 0xea, 0xbc, 0x00, 0x2d, 0xb2, 0x38,
	0x5d, 0x25, 0x91, 0xde, 0xe3, 0x22, 0xdd, 0x02, 0xc5, 0x0f, 0xb0, 0x17, 0x68, 0x55, 0x0a, 0xce,
	0x5e, 0xc2, 0x58, 0x4f, 0x6d, 0xc7, 0xf6, 0xcf, 0xb5, 0x7d, 0xba, 0x1c, 0xbd, 0xa1, 0x01, 0x54,
	0x03, 0x7b, 0x4e, 0x9e, 0xb9, 0x0e, 0xd1, 0x40, 0x48, 0x97, 0x7c, 0x47, 0x3d, 0xa8, 0x59, 0xc4,
	0x9f, 0x78, 0xf6, 0x22, 0x6c, 0x87, 0x5a, 0x8d, 0x92, 0xf2, 0x4b, 0xc6, 0x14, 0x3a, 0x61, 0x59,
	0xdd, 0x9d, 0x84, 0xc9, 0xf3, 0xd1, 0x74, 0x84, 0x57, 0x57, 0x53, 0x57, 0xe7, 0xa0, 0xb1, 0x16,
	0x7c, 0xe5, 0x4c, 0xbf, 0x4a, 0xd0, 0x66, 0x15, 0x9c, 0x64, 0x54, 0xc4, 0x13, 0xc7, 0x5e, 0x12,
	0xc5, 0x5e, 0x16, 0xc7, 0xbe, 0xb4, 0x36, 0xf6, 0xe5, 0xcb, 0xc5, 0x5e, 0x29, 0xc4, 0x3e, 0xeb,
	0x77, 0x25, 0xd7, 0x2b, 0xbf, 0x82, 0x36, 0x6b, 0xc2, 0x79, 0x2f, 0x36, 0x46, 0x0b, 0x41, 0xd9,
	0xb7, 0x9f, 0x11, 0xea, 0x8d, 0x62, 0xd2, 0xe7, 0x70, 0x6d, 0x81, 0x67, 0xac, 0xb8, 0x15, 0x93,
	0x3e, 0x1b, 0xa7, 0x70, 0x2d, 0x94, 0xfd, 0x52, 0xd8, 0x2c, 0xd0, 0x72, 0x12, 0xe8, 0x11, 0xb4,
	0x99, 0xa4, 0x2f, 0x84, 0xf2, 0xbb, 0x04, 0x6d, 0x36, 0x32, 0xf3, 0x30, 0xf9, 0x9a, 0x8f, 0xe5,
	0x93, 0x45, 0xf2, 0x95, 0xc4, 0xf2, 0x95, 0xd7, 0xca, 0xa7, 0x5c, 0x4e, 0xbe, 0xca, 0x16, 0xf9,
	0xf2, 0x33, 0xf4, 0x7d, 0xe8, 0x30, 0xf9, 0x3e, 0x8e, 0x00, 0x7d, 0x2e, 0x0b, 0xa9, 0x44, 0x92,
	0x40, 0x22, 0x99, 0x93, 0xe8, 0x3d, 0x68, 0x85, 0x7d, 0x33, 0xfe, 0xbd, 0x49, 0xfc, 0x85, 0xeb,
	0xf8, 0x64, 0x6d, 0xff, 0x4c, 0x0c, 0xa3, 0xfe, 0xf9, 0x21, 0x54, 0xe3, 0xa5, 0x9d, 0x42, 0xd9,
	0x81, 0x8a, 0x3b, 0x9d, 0xfa, 0x24, 0x88, 0xa6, 0x40, 0xf4, 0x66, 0xfc, 0x21, 0x81, 0xc6, 0xea,
	0x49, 0x50, 0xba, 0x2f, 0x74, 0x1e, 0x40, 0xaf, 0x42, 0xf5, 0x09, 0x21, 0x8f, 0xc6, 0x16, 0x5e,
	0x45, 0xd9, 0xb9, 0x17, 0xbe, 0x8f, 0xf0, 0x0a, 0xdd, 0x82, 0x26, 0xd5, 0x72, 0x1c, 0x0a, 0x32,
	0x76, 0xa7, 0xd4, 0xa6, 0x4c, 0x6d, 0x54, 0xfa, 0x21, 0xf4, 0x8d, 0x6e, 0x05, 0x1d, 0x41, 0x9d,
	0x38, 0x56, 0xc6, 0x90, 0x4d, 0xa7, 0x03, 0xe2, 0x58, 0xa9, 0xd9, 0xa6, 0x19, 0xf5, 0xb7, 0x04,
	0x1a, 0x4b, 0xc2, 0xff, 0xad, 0x8f, 0x51, 0x0e, 0xec, 0x25, 0x85, 0xf7, 0x93, 0x04, 0x35, 0xce,
	0xdb, 0x42, 0x8e, 0xf0, 0x1b, 0x97, 0x77, 0xd8, 0x78, 0x69, 0xd7, 0x8d, 0x97, 0xb7, 0x6c, 0x5c,
	0xc9, 0x89, 0x63, 0x02, 0x7a, 0xd9, 0xaa, 0x18, 0xef, 0x42, 0x3d, 0x2c, 0x2e, 0xde, 0xff, 0x5b,
	0xd9, 0xba, 0xba, 0x16, 0xd7, 0x15, 0xcf, 0xcd, 0x2c, 0x4e, 0xfe, 0x79, 0x05, 0xea, 0x71, 0xb7,
	0x7a, 0x48, 0xbc, 0xc7, 0xf6, 0x84, 0xa0, 0xcf, 0x41, 0xcd, 0x4e, 0x1d, 0x74, 0x23, 0x39, 0xd9,
	0x88, 0xa6, 0x91, 0x5e, 0x38, 0xf8, 0x18, 0xed, 0xef, 0x7f, 0xfb, 0xeb, 0x07, 0xb9, 0x6e, 0xc0,
	0x30, 0x76, 0xc3, 0xbf, 0x23, 0x0d, 0xd0, 0x17, 0xa0, 0x66, 0x27, 0x41, 0x8a, 0x2c, 0x9c, 0x10,
	0x7a, 0x2b, 0x69, 0x6a, 0xdc, 0xb9, 0xcb, 0x40, 0x14, 0xfd, 0x00, 0x71, 0xe8, 0xe8, 0x53, 0x38,
	0xe0, 0xc7, 0x00, 0xba, 0x1e, 0xff, 0x52, 0x30, 0x1c, 0x04, 0x1b, 0xee, 0x52, 0xc8, 0x26, 0xaa,
	0xa7, 0x90, 0xc3, 0x6f, 0x6d, 0xeb, 0x39, 0xfa, 0x1a, 0xd4, 0x6c, 0x4f, 0x4f, 0xb7, 0x2c, 0xec,
	0xf5, 0x02, 0x6c, 0x9d, 0x62, 0xb7, 0xf4, 0x3c, 0x76, 0x18, 0x91, 0x2f, 0x41, 0xcd, 0x4e, 0x9e,
	0x14, 0x5e, 0x38, 0x91, 0xd6, 0x6f, 0x7d, 0x50, 0xd8, 0xfa, 0x1c, 0xea, 0xb9, 0xc6, 0x8d, 0x5e,
	0xcb, 0x86, 0x3b, 0xdf, 0xd1, 0xf5, 0x43, 0x3e, 0xde, 0xf9, 0x7e, 0x6d, 0x1c, 0x52, 0xa6, 0x0e,
	0x6a, 0x71, 0x4c, 0x41, 0x82, 0xfd, 0x04, 0x9a, 0x85, 0xe6, 0x8a, 0x7a, 0xd9, 0xcc, 0x29, 0x66,
	0xbf, 0x2e, 0xca, 0x4e, 0xe3, 0x4d, 0xca, 0x74, 0x64, 0xf4, 0x78, 0x9f, 0xb8, 0x22, 0x79, 0x3e,
	0xc4, 0xd4, 0x9a, 0x66, 0x95, 0x07, 0x4d, 0xe6, 0x0e, 0x4f, 0xac, 0x8b, 0x92, 0x3e, 0xa2, 0xec,
	0xf2, 0x5e, 0xf2, 0xb4, 0x7d, 0x4a, 0x6b, 0xa0, 0xad, 0xb4, 0x68, 0x09, 0xf5, 0xdc, 0x61, 0x33,
	0x8d, 0xad, 0xf8, 0x14, 0x2a, 0x76, 0xf4, 0x36, 0x65, 0x7c, 0x03, 0x1d, 0x6d, 0x63, 0x64, 0x92,
	0x7e, 0x07, 0xcd, 0x42, 0x73, 0x4f, 0x63, 0xbc, 0xae, 0xef, 0x8b, 0xa9, 0xdf, 0xa2, 0xd4, 0x03,
	0x7d, 0x37, 0xea, 0x30, 0xd0, 0x2b, 0x68, 0x16, 0x4e, 0xbe, 0x29, 0xfb, 0xba, 0x43, 0xf1, 0x46,
	0xc7, 0x07, 0x3b, 0x3a, 0x1e, 0x40, 0x23, 0xff, 0x5f, 0x16, 0xdd, 0xcc, 0xe6, 0x56, 0xe1, 0x5f,
	0xae, 0x2e, 0xf8, 0x0f, 0xbe, 0x43, 0x66, 0x91, 0xa7, 0x49, 0x66, 0x2d, 0xa1, 0x91, 0xbf, 0x3e,
	0x48, 0x59, 0xd7, 0x5c, 0x2c, 0xe8, 0x1d, 0x3e, 0xbb, 0x38, 0xe6, 0xed, 0xc9, 0x15, 0x31, 0x23,
	0x0f, 0xd4, 0xec, 0x05, 0x41, 0xda, 0x14, 0x84, 0x17, 0x07, 0x42, 0x47, 0xb7, 0x67, 0x56, 0x44,
	0xc7, 0x02, 0xbc, 0x82, 0x46, 0xfe, 0xba, 0x27, 0x75, 0x75, 0xcd, 0x45, 0x90, 0x90, 0x77, 0x7b,
	0x5a, 0xf1, 0xbc, 0x61, 0x94, 0x1f, 0x43, 0x23, 0x7f, 0xa7, 0x95, 0x52, 0xaf, 0xb9, 0xed, 0xda,
	0xe4, 0xf2, 0x60, 0x37, 0xea, 0xb3, 0x0a, 0xbd, 0x52, 0x7b, 0xfb, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x4e, 0xdc, 0x87, 0xcb, 0x97, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalendarServiceClient is the client API for CalendarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalendarServiceClient interface {
	// Create calendar
	CreateCalendar(ctx context.Context, in *CreateCalendarRequest, opts ...grpc.CallOption) (*Calendar, error)
	// List of calendar
	SearchCalendar(ctx context.Context, in *SearchCalendarRequest, opts ...grpc.CallOption) (*ListCalendar, error)
	// Calendar item
	ReadCalendar(ctx context.Context, in *ReadCalendarRequest, opts ...grpc.CallOption) (*Calendar, error)
	// Update calendar
	UpdateCalendar(ctx context.Context, in *UpdateCalendarRequest, opts ...grpc.CallOption) (*Calendar, error)
	// Remove calendar
	DeleteCalendar(ctx context.Context, in *DeleteCalendarRequest, opts ...grpc.CallOption) (*Calendar, error)
	// List timezones
	SearchTimezones(ctx context.Context, in *SearchTimezonesRequest, opts ...grpc.CallOption) (*ListTimezoneResponse, error)
	// Create AcceptOfDay
	CreateAcceptOfDay(ctx context.Context, in *CreateAcceptOfDayRequest, opts ...grpc.CallOption) (*AcceptOfDay, error)
	// List AcceptOfDay
	SearchAcceptOfDay(ctx context.Context, in *AcceptOfDayRequest, opts ...grpc.CallOption) (*ListAcceptOfDay, error)
	// Read AcceptOfDay
	ReadAcceptOfDay(ctx context.Context, in *ReadAcceptOfDayRequest, opts ...grpc.CallOption) (*AcceptOfDay, error)
	// Update AcceptOfDay
	UpdateAcceptOfDay(ctx context.Context, in *UpdateAcceptOfDayRequest, opts ...grpc.CallOption) (*AcceptOfDay, error)
	// Delete AcceptOfDay
	DeleteAcceptOfDay(ctx context.Context, in *DeleteAcceptOfDayRequest, opts ...grpc.CallOption) (*AcceptOfDay, error)
	// Create ExceptDate
	CreateExceptDate(ctx context.Context, in *CreateExceptDateRequest, opts ...grpc.CallOption) (*ExceptDate, error)
	// List ExceptDate
	SearchExceptDate(ctx context.Context, in *SearchExceptDateRequest, opts ...grpc.CallOption) (*ListExceptDate, error)
	// Read ExceptDate
	ReadExceptDate(ctx context.Context, in *ReadExceptDateRequest, opts ...grpc.CallOption) (*ExceptDate, error)
	// Update ExceptDate
	UpdateExceptDate(ctx context.Context, in *UpdateExceptDateRequest, opts ...grpc.CallOption) (*ExceptDate, error)
	// Delete ExceptDate
	DeleteExceptDate(ctx context.Context, in *DeleteExceptDateRequest, opts ...grpc.CallOption) (*ExceptDate, error)
}

type calendarServiceClient struct {
	cc *grpc.ClientConn
}

func NewCalendarServiceClient(cc *grpc.ClientConn) CalendarServiceClient {
	return &calendarServiceClient{cc}
}

func (c *calendarServiceClient) CreateCalendar(ctx context.Context, in *CreateCalendarRequest, opts ...grpc.CallOption) (*Calendar, error) {
	out := new(Calendar)
	err := c.cc.Invoke(ctx, "/engine.CalendarService/CreateCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) SearchCalendar(ctx context.Context, in *SearchCalendarRequest, opts ...grpc.CallOption) (*ListCalendar, error) {
	out := new(ListCalendar)
	err := c.cc.Invoke(ctx, "/engine.CalendarService/SearchCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) ReadCalendar(ctx context.Context, in *ReadCalendarRequest, opts ...grpc.CallOption) (*Calendar, error) {
	out := new(Calendar)
	err := c.cc.Invoke(ctx, "/engine.CalendarService/ReadCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) UpdateCalendar(ctx context.Context, in *UpdateCalendarRequest, opts ...grpc.CallOption) (*Calendar, error) {
	out := new(Calendar)
	err := c.cc.Invoke(ctx, "/engine.CalendarService/UpdateCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) DeleteCalendar(ctx context.Context, in *DeleteCalendarRequest, opts ...grpc.CallOption) (*Calendar, error) {
	out := new(Calendar)
	err := c.cc.Invoke(ctx, "/engine.CalendarService/DeleteCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) SearchTimezones(ctx context.Context, in *SearchTimezonesRequest, opts ...grpc.CallOption) (*ListTimezoneResponse, error) {
	out := new(ListTimezoneResponse)
	err := c.cc.Invoke(ctx, "/engine.CalendarService/SearchTimezones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) CreateAcceptOfDay(ctx context.Context, in *CreateAcceptOfDayRequest, opts ...grpc.CallOption) (*AcceptOfDay, error) {
	out := new(AcceptOfDay)
	err := c.cc.Invoke(ctx, "/engine.CalendarService/CreateAcceptOfDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) SearchAcceptOfDay(ctx context.Context, in *AcceptOfDayRequest, opts ...grpc.CallOption) (*ListAcceptOfDay, error) {
	out := new(ListAcceptOfDay)
	err := c.cc.Invoke(ctx, "/engine.CalendarService/SearchAcceptOfDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) ReadAcceptOfDay(ctx context.Context, in *ReadAcceptOfDayRequest, opts ...grpc.CallOption) (*AcceptOfDay, error) {
	out := new(AcceptOfDay)
	err := c.cc.Invoke(ctx, "/engine.CalendarService/ReadAcceptOfDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) UpdateAcceptOfDay(ctx context.Context, in *UpdateAcceptOfDayRequest, opts ...grpc.CallOption) (*AcceptOfDay, error) {
	out := new(AcceptOfDay)
	err := c.cc.Invoke(ctx, "/engine.CalendarService/UpdateAcceptOfDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) DeleteAcceptOfDay(ctx context.Context, in *DeleteAcceptOfDayRequest, opts ...grpc.CallOption) (*AcceptOfDay, error) {
	out := new(AcceptOfDay)
	err := c.cc.Invoke(ctx, "/engine.CalendarService/DeleteAcceptOfDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) CreateExceptDate(ctx context.Context, in *CreateExceptDateRequest, opts ...grpc.CallOption) (*ExceptDate, error) {
	out := new(ExceptDate)
	err := c.cc.Invoke(ctx, "/engine.CalendarService/CreateExceptDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) SearchExceptDate(ctx context.Context, in *SearchExceptDateRequest, opts ...grpc.CallOption) (*ListExceptDate, error) {
	out := new(ListExceptDate)
	err := c.cc.Invoke(ctx, "/engine.CalendarService/SearchExceptDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) ReadExceptDate(ctx context.Context, in *ReadExceptDateRequest, opts ...grpc.CallOption) (*ExceptDate, error) {
	out := new(ExceptDate)
	err := c.cc.Invoke(ctx, "/engine.CalendarService/ReadExceptDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) UpdateExceptDate(ctx context.Context, in *UpdateExceptDateRequest, opts ...grpc.CallOption) (*ExceptDate, error) {
	out := new(ExceptDate)
	err := c.cc.Invoke(ctx, "/engine.CalendarService/UpdateExceptDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) DeleteExceptDate(ctx context.Context, in *DeleteExceptDateRequest, opts ...grpc.CallOption) (*ExceptDate, error) {
	out := new(ExceptDate)
	err := c.cc.Invoke(ctx, "/engine.CalendarService/DeleteExceptDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarServiceServer is the server API for CalendarService service.
type CalendarServiceServer interface {
	// Create calendar
	CreateCalendar(context.Context, *CreateCalendarRequest) (*Calendar, error)
	// List of calendar
	SearchCalendar(context.Context, *SearchCalendarRequest) (*ListCalendar, error)
	// Calendar item
	ReadCalendar(context.Context, *ReadCalendarRequest) (*Calendar, error)
	// Update calendar
	UpdateCalendar(context.Context, *UpdateCalendarRequest) (*Calendar, error)
	// Remove calendar
	DeleteCalendar(context.Context, *DeleteCalendarRequest) (*Calendar, error)
	// List timezones
	SearchTimezones(context.Context, *SearchTimezonesRequest) (*ListTimezoneResponse, error)
	// Create AcceptOfDay
	CreateAcceptOfDay(context.Context, *CreateAcceptOfDayRequest) (*AcceptOfDay, error)
	// List AcceptOfDay
	SearchAcceptOfDay(context.Context, *AcceptOfDayRequest) (*ListAcceptOfDay, error)
	// Read AcceptOfDay
	ReadAcceptOfDay(context.Context, *ReadAcceptOfDayRequest) (*AcceptOfDay, error)
	// Update AcceptOfDay
	UpdateAcceptOfDay(context.Context, *UpdateAcceptOfDayRequest) (*AcceptOfDay, error)
	// Delete AcceptOfDay
	DeleteAcceptOfDay(context.Context, *DeleteAcceptOfDayRequest) (*AcceptOfDay, error)
	// Create ExceptDate
	CreateExceptDate(context.Context, *CreateExceptDateRequest) (*ExceptDate, error)
	// List ExceptDate
	SearchExceptDate(context.Context, *SearchExceptDateRequest) (*ListExceptDate, error)
	// Read ExceptDate
	ReadExceptDate(context.Context, *ReadExceptDateRequest) (*ExceptDate, error)
	// Update ExceptDate
	UpdateExceptDate(context.Context, *UpdateExceptDateRequest) (*ExceptDate, error)
	// Delete ExceptDate
	DeleteExceptDate(context.Context, *DeleteExceptDateRequest) (*ExceptDate, error)
}

// UnimplementedCalendarServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCalendarServiceServer struct {
}

func (*UnimplementedCalendarServiceServer) CreateCalendar(ctx context.Context, req *CreateCalendarRequest) (*Calendar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCalendar not implemented")
}
func (*UnimplementedCalendarServiceServer) SearchCalendar(ctx context.Context, req *SearchCalendarRequest) (*ListCalendar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCalendar not implemented")
}
func (*UnimplementedCalendarServiceServer) ReadCalendar(ctx context.Context, req *ReadCalendarRequest) (*Calendar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCalendar not implemented")
}
func (*UnimplementedCalendarServiceServer) UpdateCalendar(ctx context.Context, req *UpdateCalendarRequest) (*Calendar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCalendar not implemented")
}
func (*UnimplementedCalendarServiceServer) DeleteCalendar(ctx context.Context, req *DeleteCalendarRequest) (*Calendar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCalendar not implemented")
}
func (*UnimplementedCalendarServiceServer) SearchTimezones(ctx context.Context, req *SearchTimezonesRequest) (*ListTimezoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTimezones not implemented")
}
func (*UnimplementedCalendarServiceServer) CreateAcceptOfDay(ctx context.Context, req *CreateAcceptOfDayRequest) (*AcceptOfDay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAcceptOfDay not implemented")
}
func (*UnimplementedCalendarServiceServer) SearchAcceptOfDay(ctx context.Context, req *AcceptOfDayRequest) (*ListAcceptOfDay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAcceptOfDay not implemented")
}
func (*UnimplementedCalendarServiceServer) ReadAcceptOfDay(ctx context.Context, req *ReadAcceptOfDayRequest) (*AcceptOfDay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAcceptOfDay not implemented")
}
func (*UnimplementedCalendarServiceServer) UpdateAcceptOfDay(ctx context.Context, req *UpdateAcceptOfDayRequest) (*AcceptOfDay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAcceptOfDay not implemented")
}
func (*UnimplementedCalendarServiceServer) DeleteAcceptOfDay(ctx context.Context, req *DeleteAcceptOfDayRequest) (*AcceptOfDay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAcceptOfDay not implemented")
}
func (*UnimplementedCalendarServiceServer) CreateExceptDate(ctx context.Context, req *CreateExceptDateRequest) (*ExceptDate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExceptDate not implemented")
}
func (*UnimplementedCalendarServiceServer) SearchExceptDate(ctx context.Context, req *SearchExceptDateRequest) (*ListExceptDate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchExceptDate not implemented")
}
func (*UnimplementedCalendarServiceServer) ReadExceptDate(ctx context.Context, req *ReadExceptDateRequest) (*ExceptDate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadExceptDate not implemented")
}
func (*UnimplementedCalendarServiceServer) UpdateExceptDate(ctx context.Context, req *UpdateExceptDateRequest) (*ExceptDate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExceptDate not implemented")
}
func (*UnimplementedCalendarServiceServer) DeleteExceptDate(ctx context.Context, req *DeleteExceptDateRequest) (*ExceptDate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExceptDate not implemented")
}

func RegisterCalendarServiceServer(s *grpc.Server, srv CalendarServiceServer) {
	s.RegisterService(&_CalendarService_serviceDesc, srv)
}

func _CalendarService_CreateCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).CreateCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarService/CreateCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).CreateCalendar(ctx, req.(*CreateCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_SearchCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).SearchCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarService/SearchCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).SearchCalendar(ctx, req.(*SearchCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_ReadCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).ReadCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarService/ReadCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).ReadCalendar(ctx, req.(*ReadCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_UpdateCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).UpdateCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarService/UpdateCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).UpdateCalendar(ctx, req.(*UpdateCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_DeleteCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).DeleteCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarService/DeleteCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).DeleteCalendar(ctx, req.(*DeleteCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_SearchTimezones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTimezonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).SearchTimezones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarService/SearchTimezones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).SearchTimezones(ctx, req.(*SearchTimezonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_CreateAcceptOfDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAcceptOfDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).CreateAcceptOfDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarService/CreateAcceptOfDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).CreateAcceptOfDay(ctx, req.(*CreateAcceptOfDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_SearchAcceptOfDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptOfDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).SearchAcceptOfDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarService/SearchAcceptOfDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).SearchAcceptOfDay(ctx, req.(*AcceptOfDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_ReadAcceptOfDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAcceptOfDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).ReadAcceptOfDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarService/ReadAcceptOfDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).ReadAcceptOfDay(ctx, req.(*ReadAcceptOfDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_UpdateAcceptOfDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAcceptOfDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).UpdateAcceptOfDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarService/UpdateAcceptOfDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).UpdateAcceptOfDay(ctx, req.(*UpdateAcceptOfDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_DeleteAcceptOfDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAcceptOfDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).DeleteAcceptOfDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarService/DeleteAcceptOfDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).DeleteAcceptOfDay(ctx, req.(*DeleteAcceptOfDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_CreateExceptDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExceptDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).CreateExceptDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarService/CreateExceptDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).CreateExceptDate(ctx, req.(*CreateExceptDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_SearchExceptDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchExceptDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).SearchExceptDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarService/SearchExceptDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).SearchExceptDate(ctx, req.(*SearchExceptDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_ReadExceptDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadExceptDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).ReadExceptDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarService/ReadExceptDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).ReadExceptDate(ctx, req.(*ReadExceptDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_UpdateExceptDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExceptDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).UpdateExceptDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarService/UpdateExceptDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).UpdateExceptDate(ctx, req.(*UpdateExceptDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_DeleteExceptDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExceptDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).DeleteExceptDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarService/DeleteExceptDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).DeleteExceptDate(ctx, req.(*DeleteExceptDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalendarService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "engine.CalendarService",
	HandlerType: (*CalendarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCalendar",
			Handler:    _CalendarService_CreateCalendar_Handler,
		},
		{
			MethodName: "SearchCalendar",
			Handler:    _CalendarService_SearchCalendar_Handler,
		},
		{
			MethodName: "ReadCalendar",
			Handler:    _CalendarService_ReadCalendar_Handler,
		},
		{
			MethodName: "UpdateCalendar",
			Handler:    _CalendarService_UpdateCalendar_Handler,
		},
		{
			MethodName: "DeleteCalendar",
			Handler:    _CalendarService_DeleteCalendar_Handler,
		},
		{
			MethodName: "SearchTimezones",
			Handler:    _CalendarService_SearchTimezones_Handler,
		},
		{
			MethodName: "CreateAcceptOfDay",
			Handler:    _CalendarService_CreateAcceptOfDay_Handler,
		},
		{
			MethodName: "SearchAcceptOfDay",
			Handler:    _CalendarService_SearchAcceptOfDay_Handler,
		},
		{
			MethodName: "ReadAcceptOfDay",
			Handler:    _CalendarService_ReadAcceptOfDay_Handler,
		},
		{
			MethodName: "UpdateAcceptOfDay",
			Handler:    _CalendarService_UpdateAcceptOfDay_Handler,
		},
		{
			MethodName: "DeleteAcceptOfDay",
			Handler:    _CalendarService_DeleteAcceptOfDay_Handler,
		},
		{
			MethodName: "CreateExceptDate",
			Handler:    _CalendarService_CreateExceptDate_Handler,
		},
		{
			MethodName: "SearchExceptDate",
			Handler:    _CalendarService_SearchExceptDate_Handler,
		},
		{
			MethodName: "ReadExceptDate",
			Handler:    _CalendarService_ReadExceptDate_Handler,
		},
		{
			MethodName: "UpdateExceptDate",
			Handler:    _CalendarService_UpdateExceptDate_Handler,
		},
		{
			MethodName: "DeleteExceptDate",
			Handler:    _CalendarService_DeleteExceptDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calendar.proto",
}
