// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calendar.proto

/*
Package engine is a generated protocol buffer package.

It is generated from these files:
	calendar.proto

It has these top-level messages:
	RemoveResponse
	Lookup
	ItemRequest
	ListReqeust
	ListCalendar
	Calendar
	ListTimezoneResponse
	Timezone
	AcceptOfDay
	AcceptOfDayReqeust
	ListAcceptOfDay
*/
package engine

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RemoveResponse struct {
}

func (m *RemoveResponse) Reset()                    { *m = RemoveResponse{} }
func (m *RemoveResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveResponse) ProtoMessage()               {}
func (*RemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Lookup struct {
	Id   int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Lookup) Reset()                    { *m = Lookup{} }
func (m *Lookup) String() string            { return proto.CompactTextString(m) }
func (*Lookup) ProtoMessage()               {}
func (*Lookup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Lookup) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Lookup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ItemRequest struct {
	DomainId int64 `protobuf:"varint,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	Id       int64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *ItemRequest) Reset()                    { *m = ItemRequest{} }
func (m *ItemRequest) String() string            { return proto.CompactTextString(m) }
func (*ItemRequest) ProtoMessage()               {}
func (*ItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ItemRequest) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *ItemRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ListReqeust struct {
	DomainId int64 `protobuf:"varint,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	Size     int32 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Page     int32 `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
}

func (m *ListReqeust) Reset()                    { *m = ListReqeust{} }
func (m *ListReqeust) String() string            { return proto.CompactTextString(m) }
func (*ListReqeust) ProtoMessage()               {}
func (*ListReqeust) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListReqeust) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *ListReqeust) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *ListReqeust) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ListCalendar struct {
	Items []*Calendar `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ListCalendar) Reset()                    { *m = ListCalendar{} }
func (m *ListCalendar) String() string            { return proto.CompactTextString(m) }
func (*ListCalendar) ProtoMessage()               {}
func (*ListCalendar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListCalendar) GetItems() []*Calendar {
	if m != nil {
		return m.Items
	}
	return nil
}

type Calendar struct {
	Id          int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	DomainId    int64   `protobuf:"varint,3,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	Start       int64   `protobuf:"varint,4,opt,name=start" json:"start,omitempty"`
	Finish      int64   `protobuf:"varint,5,opt,name=finish" json:"finish,omitempty"`
	Timezone    *Lookup `protobuf:"bytes,6,opt,name=timezone" json:"timezone,omitempty"`
	Description string  `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
}

func (m *Calendar) Reset()                    { *m = Calendar{} }
func (m *Calendar) String() string            { return proto.CompactTextString(m) }
func (*Calendar) ProtoMessage()               {}
func (*Calendar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Calendar) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Calendar) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Calendar) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *Calendar) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Calendar) GetFinish() int64 {
	if m != nil {
		return m.Finish
	}
	return 0
}

func (m *Calendar) GetTimezone() *Lookup {
	if m != nil {
		return m.Timezone
	}
	return nil
}

func (m *Calendar) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type ListTimezoneResponse struct {
	Items []*Timezone `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ListTimezoneResponse) Reset()                    { *m = ListTimezoneResponse{} }
func (m *ListTimezoneResponse) String() string            { return proto.CompactTextString(m) }
func (*ListTimezoneResponse) ProtoMessage()               {}
func (*ListTimezoneResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ListTimezoneResponse) GetItems() []*Timezone {
	if m != nil {
		return m.Items
	}
	return nil
}

type Timezone struct {
	Id     int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Offset string `protobuf:"bytes,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *Timezone) Reset()                    { *m = Timezone{} }
func (m *Timezone) String() string            { return proto.CompactTextString(m) }
func (*Timezone) ProtoMessage()               {}
func (*Timezone) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Timezone) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Timezone) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Timezone) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

type AcceptOfDay struct {
	Id             int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	WeekDay        int32 `protobuf:"varint,3,opt,name=week_day,json=weekDay" json:"week_day,omitempty"`
	StartTimeOfDay int32 `protobuf:"varint,4,opt,name=start_time_of_day,json=startTimeOfDay" json:"start_time_of_day,omitempty"`
	EndTimeOfDay   int32 `protobuf:"varint,5,opt,name=end_time_of_day,json=endTimeOfDay" json:"end_time_of_day,omitempty"`
}

func (m *AcceptOfDay) Reset()                    { *m = AcceptOfDay{} }
func (m *AcceptOfDay) String() string            { return proto.CompactTextString(m) }
func (*AcceptOfDay) ProtoMessage()               {}
func (*AcceptOfDay) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AcceptOfDay) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AcceptOfDay) GetWeekDay() int32 {
	if m != nil {
		return m.WeekDay
	}
	return 0
}

func (m *AcceptOfDay) GetStartTimeOfDay() int32 {
	if m != nil {
		return m.StartTimeOfDay
	}
	return 0
}

func (m *AcceptOfDay) GetEndTimeOfDay() int32 {
	if m != nil {
		return m.EndTimeOfDay
	}
	return 0
}

type AcceptOfDayReqeust struct {
	CalendarId int64 `protobuf:"varint,1,opt,name=calendar_id,json=calendarId" json:"calendar_id,omitempty"`
}

func (m *AcceptOfDayReqeust) Reset()                    { *m = AcceptOfDayReqeust{} }
func (m *AcceptOfDayReqeust) String() string            { return proto.CompactTextString(m) }
func (*AcceptOfDayReqeust) ProtoMessage()               {}
func (*AcceptOfDayReqeust) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AcceptOfDayReqeust) GetCalendarId() int64 {
	if m != nil {
		return m.CalendarId
	}
	return 0
}

type ListAcceptOfDay struct {
	Items []*AcceptOfDay `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ListAcceptOfDay) Reset()                    { *m = ListAcceptOfDay{} }
func (m *ListAcceptOfDay) String() string            { return proto.CompactTextString(m) }
func (*ListAcceptOfDay) ProtoMessage()               {}
func (*ListAcceptOfDay) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListAcceptOfDay) GetItems() []*AcceptOfDay {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*RemoveResponse)(nil), "engine.RemoveResponse")
	proto.RegisterType((*Lookup)(nil), "engine.Lookup")
	proto.RegisterType((*ItemRequest)(nil), "engine.ItemRequest")
	proto.RegisterType((*ListReqeust)(nil), "engine.ListReqeust")
	proto.RegisterType((*ListCalendar)(nil), "engine.ListCalendar")
	proto.RegisterType((*Calendar)(nil), "engine.Calendar")
	proto.RegisterType((*ListTimezoneResponse)(nil), "engine.ListTimezoneResponse")
	proto.RegisterType((*Timezone)(nil), "engine.Timezone")
	proto.RegisterType((*AcceptOfDay)(nil), "engine.AcceptOfDay")
	proto.RegisterType((*AcceptOfDayReqeust)(nil), "engine.AcceptOfDayReqeust")
	proto.RegisterType((*ListAcceptOfDay)(nil), "engine.ListAcceptOfDay")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CalendarApi service

type CalendarApiClient interface {
	// - POST /calendar
	Create(ctx context.Context, in *Calendar, opts ...grpc.CallOption) (*Calendar, error)
	// -GET /calendar
	List(ctx context.Context, in *ListReqeust, opts ...grpc.CallOption) (*ListCalendar, error)
	// -GET /calendar/:id
	Get(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*Calendar, error)
	// -PUT /calendar/:id
	Update(ctx context.Context, in *Calendar, opts ...grpc.CallOption) (*Calendar, error)
	// -DELETE /calendar/:id
	Remove(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*Calendar, error)
	// -GET /calendar/timezones
	GetTimezones(ctx context.Context, in *ListReqeust, opts ...grpc.CallOption) (*ListTimezoneResponse, error)
	//
	GetAcceptOfDay(ctx context.Context, in *AcceptOfDayReqeust, opts ...grpc.CallOption) (*ListAcceptOfDay, error)
}

type calendarApiClient struct {
	cc *grpc.ClientConn
}

func NewCalendarApiClient(cc *grpc.ClientConn) CalendarApiClient {
	return &calendarApiClient{cc}
}

func (c *calendarApiClient) Create(ctx context.Context, in *Calendar, opts ...grpc.CallOption) (*Calendar, error) {
	out := new(Calendar)
	err := grpc.Invoke(ctx, "/engine.CalendarApi/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarApiClient) List(ctx context.Context, in *ListReqeust, opts ...grpc.CallOption) (*ListCalendar, error) {
	out := new(ListCalendar)
	err := grpc.Invoke(ctx, "/engine.CalendarApi/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarApiClient) Get(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*Calendar, error) {
	out := new(Calendar)
	err := grpc.Invoke(ctx, "/engine.CalendarApi/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarApiClient) Update(ctx context.Context, in *Calendar, opts ...grpc.CallOption) (*Calendar, error) {
	out := new(Calendar)
	err := grpc.Invoke(ctx, "/engine.CalendarApi/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarApiClient) Remove(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*Calendar, error) {
	out := new(Calendar)
	err := grpc.Invoke(ctx, "/engine.CalendarApi/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarApiClient) GetTimezones(ctx context.Context, in *ListReqeust, opts ...grpc.CallOption) (*ListTimezoneResponse, error) {
	out := new(ListTimezoneResponse)
	err := grpc.Invoke(ctx, "/engine.CalendarApi/GetTimezones", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarApiClient) GetAcceptOfDay(ctx context.Context, in *AcceptOfDayReqeust, opts ...grpc.CallOption) (*ListAcceptOfDay, error) {
	out := new(ListAcceptOfDay)
	err := grpc.Invoke(ctx, "/engine.CalendarApi/GetAcceptOfDay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CalendarApi service

type CalendarApiServer interface {
	// - POST /calendar
	Create(context.Context, *Calendar) (*Calendar, error)
	// -GET /calendar
	List(context.Context, *ListReqeust) (*ListCalendar, error)
	// -GET /calendar/:id
	Get(context.Context, *ItemRequest) (*Calendar, error)
	// -PUT /calendar/:id
	Update(context.Context, *Calendar) (*Calendar, error)
	// -DELETE /calendar/:id
	Remove(context.Context, *ItemRequest) (*Calendar, error)
	// -GET /calendar/timezones
	GetTimezones(context.Context, *ListReqeust) (*ListTimezoneResponse, error)
	//
	GetAcceptOfDay(context.Context, *AcceptOfDayReqeust) (*ListAcceptOfDay, error)
}

func RegisterCalendarApiServer(s *grpc.Server, srv CalendarApiServer) {
	s.RegisterService(&_CalendarApi_serviceDesc, srv)
}

func _CalendarApi_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Calendar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarApiServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarApi/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarApiServer).Create(ctx, req.(*Calendar))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarApi_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarApiServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarApi/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarApiServer).List(ctx, req.(*ListReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarApi_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarApiServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarApi/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarApiServer).Get(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarApi_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Calendar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarApiServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarApi/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarApiServer).Update(ctx, req.(*Calendar))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarApi_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarApiServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarApi/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarApiServer).Remove(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarApi_GetTimezones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarApiServer).GetTimezones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarApi/GetTimezones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarApiServer).GetTimezones(ctx, req.(*ListReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarApi_GetAcceptOfDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptOfDayReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarApiServer).GetAcceptOfDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarApi/GetAcceptOfDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarApiServer).GetAcceptOfDay(ctx, req.(*AcceptOfDayReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalendarApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "engine.CalendarApi",
	HandlerType: (*CalendarApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CalendarApi_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CalendarApi_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CalendarApi_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CalendarApi_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _CalendarApi_Remove_Handler,
		},
		{
			MethodName: "GetTimezones",
			Handler:    _CalendarApi_GetTimezones_Handler,
		},
		{
			MethodName: "GetAcceptOfDay",
			Handler:    _CalendarApi_GetAcceptOfDay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calendar.proto",
}

func init() { proto.RegisterFile("calendar.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 545 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x6a, 0x13, 0x41,
	0x14, 0xee, 0x66, 0x93, 0x6d, 0x7a, 0xb6, 0x6c, 0xeb, 0x18, 0xea, 0x1a, 0x05, 0xc3, 0x80, 0x92,
	0x8a, 0x2c, 0x98, 0xa2, 0x17, 0x22, 0x42, 0x89, 0x18, 0x02, 0x05, 0x61, 0xd0, 0xeb, 0xb0, 0x66,
	0x4e, 0xea, 0x50, 0x77, 0x66, 0x9b, 0x99, 0x28, 0xed, 0x23, 0x78, 0xeb, 0x43, 0xf9, 0x5a, 0xb2,
	0xb3, 0x3f, 0x4e, 0x9a, 0x88, 0xb9, 0x9b, 0xf9, 0xce, 0x77, 0xfe, 0xbe, 0x73, 0x66, 0x20, 0x9a,
	0xa7, 0xdf, 0x50, 0xf2, 0x74, 0x99, 0xe4, 0x4b, 0x65, 0x14, 0x09, 0x50, 0x5e, 0x0a, 0x89, 0xf4,
	0x18, 0x22, 0x86, 0x99, 0xfa, 0x8e, 0x0c, 0x75, 0xae, 0xa4, 0x46, 0xfa, 0x02, 0x82, 0x0b, 0xa5,
	0xae, 0x56, 0x39, 0x89, 0xa0, 0x25, 0x78, 0xec, 0x0d, 0xbc, 0xa1, 0xcf, 0x5a, 0x82, 0x13, 0x02,
	0x6d, 0x99, 0x66, 0x18, 0xb7, 0x06, 0xde, 0xf0, 0x80, 0xd9, 0x33, 0x7d, 0x03, 0xe1, 0xd4, 0x60,
	0xc6, 0xf0, 0x7a, 0x85, 0xda, 0x90, 0x47, 0x70, 0xc0, 0x55, 0x96, 0x0a, 0x39, 0x6b, 0x3c, 0xbb,
	0x25, 0x30, 0xe5, 0x55, 0xbc, 0x56, 0x1d, 0x8f, 0x32, 0x08, 0x2f, 0x84, 0x36, 0x0c, 0xaf, 0x71,
	0xf5, 0x3f, 0x5f, 0x02, 0x6d, 0x2d, 0x6e, 0xcb, 0xdc, 0x1d, 0x66, 0xcf, 0x05, 0x96, 0xa7, 0x97,
	0x18, 0xfb, 0x25, 0x56, 0x9c, 0xe9, 0x6b, 0x38, 0x2c, 0x62, 0x8e, 0xab, 0x6e, 0xc9, 0x33, 0xe8,
	0x08, 0x83, 0x99, 0x8e, 0xbd, 0x81, 0x3f, 0x0c, 0x47, 0xc7, 0x49, 0xd9, 0x77, 0x52, 0x13, 0x58,
	0x69, 0xa6, 0xbf, 0x3d, 0xe8, 0x36, 0x4e, 0x3b, 0x34, 0xbe, 0x5e, 0xad, 0x7f, 0xa7, 0xda, 0x1e,
	0x74, 0xb4, 0x49, 0x97, 0x26, 0x6e, 0x5b, 0x43, 0x79, 0x21, 0x27, 0x10, 0x2c, 0x84, 0x14, 0xfa,
	0x6b, 0xdc, 0xb1, 0x70, 0x75, 0x23, 0xcf, 0xa1, 0x6b, 0x44, 0x86, 0xb7, 0x4a, 0x62, 0x1c, 0x0c,
	0xbc, 0x61, 0x38, 0x8a, 0xea, 0x32, 0xcb, 0x49, 0xb0, 0xc6, 0x4e, 0x06, 0x10, 0x72, 0xd4, 0xf3,
	0xa5, 0xc8, 0x8d, 0x50, 0x32, 0xde, 0xb7, 0x15, 0xb9, 0x10, 0x7d, 0x07, 0xbd, 0x42, 0x81, 0x4f,
	0x95, 0x47, 0x3d, 0xd7, 0x7f, 0x2a, 0xd1, 0x10, 0x2b, 0x25, 0x3e, 0x40, 0xb7, 0x86, 0x76, 0x12,
	0xe2, 0x04, 0x02, 0xb5, 0x58, 0x68, 0x34, 0x56, 0x85, 0x03, 0x56, 0xdd, 0xe8, 0x4f, 0x0f, 0xc2,
	0xf3, 0xf9, 0x1c, 0x73, 0xf3, 0x71, 0xf1, 0x3e, 0xbd, 0xd9, 0x88, 0xf5, 0x10, 0xba, 0x3f, 0x10,
	0xaf, 0x66, 0x3c, 0xbd, 0xa9, 0x26, 0xb8, 0x5f, 0xdc, 0x0b, 0xea, 0x29, 0xdc, 0xb3, 0x8a, 0xcd,
	0x8a, 0xb6, 0x67, 0x6a, 0x61, 0x39, 0x6d, 0xcb, 0x89, 0xac, 0xa1, 0x28, 0xb0, 0x8c, 0xfa, 0x14,
	0x8e, 0x50, 0xf2, 0x35, 0x62, 0xc7, 0x12, 0x0f, 0x51, 0xf2, 0x86, 0x46, 0x5f, 0x01, 0x71, 0x6a,
	0xa9, 0x37, 0xee, 0x09, 0x84, 0xf5, 0xb3, 0xf8, 0xbb, 0x73, 0x50, 0x43, 0x53, 0x4e, 0xdf, 0xc2,
	0x51, 0xa1, 0xa5, 0xdb, 0xc6, 0xe9, 0xba, 0x8c, 0xf7, 0x6b, 0x19, 0xdd, 0xf0, 0x25, 0x63, 0xf4,
	0xcb, 0x87, 0xb0, 0xde, 0xa9, 0xf3, 0x5c, 0x90, 0x04, 0x82, 0xf1, 0x12, 0x53, 0x83, 0x64, 0x63,
	0x0d, 0xfb, 0x1b, 0x08, 0xdd, 0x23, 0x67, 0xd0, 0x2e, 0xb2, 0x93, 0x26, 0x87, 0xf3, 0x5a, 0xfa,
	0x3d, 0x17, 0x74, 0x9c, 0x12, 0xf0, 0x27, 0xe8, 0xf8, 0x38, 0xaf, 0x73, 0x6b, 0x92, 0x04, 0x82,
	0xcf, 0x39, 0xdf, 0xbd, 0xa8, 0x97, 0x10, 0x94, 0x1f, 0xc6, 0xee, 0x29, 0xc6, 0x70, 0x38, 0xc1,
	0x66, 0x21, 0xf5, 0xf6, 0x7e, 0x1e, 0xbb, 0xe0, 0xdd, 0xe5, 0xa5, 0x7b, 0x64, 0x02, 0xd1, 0x04,
	0xd7, 0x26, 0xd1, 0xdf, 0x26, 0x7d, 0x15, 0xed, 0x81, 0x1b, 0xcd, 0xb1, 0xd3, 0xbd, 0x2f, 0x81,
	0xfd, 0x00, 0xcf, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x16, 0x59, 0x30, 0x12, 0x05, 0x00,
	0x00,
}
