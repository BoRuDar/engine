// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calendar.proto

package engine

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ListCalendar struct {
	Items                []*Calendar `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListCalendar) Reset()         { *m = ListCalendar{} }
func (m *ListCalendar) String() string { return proto.CompactTextString(m) }
func (*ListCalendar) ProtoMessage()    {}
func (*ListCalendar) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{0}
}

func (m *ListCalendar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCalendar.Unmarshal(m, b)
}
func (m *ListCalendar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCalendar.Marshal(b, m, deterministic)
}
func (m *ListCalendar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCalendar.Merge(m, src)
}
func (m *ListCalendar) XXX_Size() int {
	return xxx_messageInfo_ListCalendar.Size(m)
}
func (m *ListCalendar) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCalendar.DiscardUnknown(m)
}

var xxx_messageInfo_ListCalendar proto.InternalMessageInfo

func (m *ListCalendar) GetItems() []*Calendar {
	if m != nil {
		return m.Items
	}
	return nil
}

type Calendar struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DomainId             int64    `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	CreatedAt            int64    `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy            *Lookup  `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy            *Lookup  `protobuf:"bytes,6,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Name                 string   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Start                int64    `protobuf:"varint,8,opt,name=start,proto3" json:"start,omitempty"`
	Finish               int64    `protobuf:"varint,9,opt,name=finish,proto3" json:"finish,omitempty"`
	Timezone             *Lookup  `protobuf:"bytes,10,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Description          string   `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Calendar) Reset()         { *m = Calendar{} }
func (m *Calendar) String() string { return proto.CompactTextString(m) }
func (*Calendar) ProtoMessage()    {}
func (*Calendar) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{1}
}

func (m *Calendar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Calendar.Unmarshal(m, b)
}
func (m *Calendar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Calendar.Marshal(b, m, deterministic)
}
func (m *Calendar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Calendar.Merge(m, src)
}
func (m *Calendar) XXX_Size() int {
	return xxx_messageInfo_Calendar.Size(m)
}
func (m *Calendar) XXX_DiscardUnknown() {
	xxx_messageInfo_Calendar.DiscardUnknown(m)
}

var xxx_messageInfo_Calendar proto.InternalMessageInfo

func (m *Calendar) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Calendar) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *Calendar) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Calendar) GetCreatedBy() *Lookup {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *Calendar) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Calendar) GetUpdatedBy() *Lookup {
	if m != nil {
		return m.UpdatedBy
	}
	return nil
}

func (m *Calendar) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Calendar) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Calendar) GetFinish() int64 {
	if m != nil {
		return m.Finish
	}
	return 0
}

func (m *Calendar) GetTimezone() *Lookup {
	if m != nil {
		return m.Timezone
	}
	return nil
}

func (m *Calendar) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type ListTimezoneResponse struct {
	Items                []*Timezone `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListTimezoneResponse) Reset()         { *m = ListTimezoneResponse{} }
func (m *ListTimezoneResponse) String() string { return proto.CompactTextString(m) }
func (*ListTimezoneResponse) ProtoMessage()    {}
func (*ListTimezoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{2}
}

func (m *ListTimezoneResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTimezoneResponse.Unmarshal(m, b)
}
func (m *ListTimezoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTimezoneResponse.Marshal(b, m, deterministic)
}
func (m *ListTimezoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTimezoneResponse.Merge(m, src)
}
func (m *ListTimezoneResponse) XXX_Size() int {
	return xxx_messageInfo_ListTimezoneResponse.Size(m)
}
func (m *ListTimezoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTimezoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTimezoneResponse proto.InternalMessageInfo

func (m *ListTimezoneResponse) GetItems() []*Timezone {
	if m != nil {
		return m.Items
	}
	return nil
}

type Timezone struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Offset               string   `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timezone) Reset()         { *m = Timezone{} }
func (m *Timezone) String() string { return proto.CompactTextString(m) }
func (*Timezone) ProtoMessage()    {}
func (*Timezone) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{3}
}

func (m *Timezone) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timezone.Unmarshal(m, b)
}
func (m *Timezone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timezone.Marshal(b, m, deterministic)
}
func (m *Timezone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timezone.Merge(m, src)
}
func (m *Timezone) XXX_Size() int {
	return xxx_messageInfo_Timezone.Size(m)
}
func (m *Timezone) XXX_DiscardUnknown() {
	xxx_messageInfo_Timezone.DiscardUnknown(m)
}

var xxx_messageInfo_Timezone proto.InternalMessageInfo

func (m *Timezone) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Timezone) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Timezone) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

type AcceptOfDay struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WeekDay              int32    `protobuf:"varint,3,opt,name=week_day,json=weekDay,proto3" json:"week_day,omitempty"`
	StartTimeOfDay       int32    `protobuf:"varint,4,opt,name=start_time_of_day,json=startTimeOfDay,proto3" json:"start_time_of_day,omitempty"`
	EndTimeOfDay         int32    `protobuf:"varint,5,opt,name=end_time_of_day,json=endTimeOfDay,proto3" json:"end_time_of_day,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcceptOfDay) Reset()         { *m = AcceptOfDay{} }
func (m *AcceptOfDay) String() string { return proto.CompactTextString(m) }
func (*AcceptOfDay) ProtoMessage()    {}
func (*AcceptOfDay) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{4}
}

func (m *AcceptOfDay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcceptOfDay.Unmarshal(m, b)
}
func (m *AcceptOfDay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcceptOfDay.Marshal(b, m, deterministic)
}
func (m *AcceptOfDay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptOfDay.Merge(m, src)
}
func (m *AcceptOfDay) XXX_Size() int {
	return xxx_messageInfo_AcceptOfDay.Size(m)
}
func (m *AcceptOfDay) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptOfDay.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptOfDay proto.InternalMessageInfo

func (m *AcceptOfDay) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AcceptOfDay) GetWeekDay() int32 {
	if m != nil {
		return m.WeekDay
	}
	return 0
}

func (m *AcceptOfDay) GetStartTimeOfDay() int32 {
	if m != nil {
		return m.StartTimeOfDay
	}
	return 0
}

func (m *AcceptOfDay) GetEndTimeOfDay() int32 {
	if m != nil {
		return m.EndTimeOfDay
	}
	return 0
}

type AcceptOfDayReqeust struct {
	CalendarId           int64    `protobuf:"varint,1,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcceptOfDayReqeust) Reset()         { *m = AcceptOfDayReqeust{} }
func (m *AcceptOfDayReqeust) String() string { return proto.CompactTextString(m) }
func (*AcceptOfDayReqeust) ProtoMessage()    {}
func (*AcceptOfDayReqeust) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{5}
}

func (m *AcceptOfDayReqeust) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcceptOfDayReqeust.Unmarshal(m, b)
}
func (m *AcceptOfDayReqeust) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcceptOfDayReqeust.Marshal(b, m, deterministic)
}
func (m *AcceptOfDayReqeust) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptOfDayReqeust.Merge(m, src)
}
func (m *AcceptOfDayReqeust) XXX_Size() int {
	return xxx_messageInfo_AcceptOfDayReqeust.Size(m)
}
func (m *AcceptOfDayReqeust) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptOfDayReqeust.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptOfDayReqeust proto.InternalMessageInfo

func (m *AcceptOfDayReqeust) GetCalendarId() int64 {
	if m != nil {
		return m.CalendarId
	}
	return 0
}

type ListAcceptOfDay struct {
	Items                []*AcceptOfDay `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListAcceptOfDay) Reset()         { *m = ListAcceptOfDay{} }
func (m *ListAcceptOfDay) String() string { return proto.CompactTextString(m) }
func (*ListAcceptOfDay) ProtoMessage()    {}
func (*ListAcceptOfDay) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{6}
}

func (m *ListAcceptOfDay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAcceptOfDay.Unmarshal(m, b)
}
func (m *ListAcceptOfDay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAcceptOfDay.Marshal(b, m, deterministic)
}
func (m *ListAcceptOfDay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAcceptOfDay.Merge(m, src)
}
func (m *ListAcceptOfDay) XXX_Size() int {
	return xxx_messageInfo_ListAcceptOfDay.Size(m)
}
func (m *ListAcceptOfDay) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAcceptOfDay.DiscardUnknown(m)
}

var xxx_messageInfo_ListAcceptOfDay proto.InternalMessageInfo

func (m *ListAcceptOfDay) GetItems() []*AcceptOfDay {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*ListCalendar)(nil), "engine.ListCalendar")
	proto.RegisterType((*Calendar)(nil), "engine.Calendar")
	proto.RegisterType((*ListTimezoneResponse)(nil), "engine.ListTimezoneResponse")
	proto.RegisterType((*Timezone)(nil), "engine.Timezone")
	proto.RegisterType((*AcceptOfDay)(nil), "engine.AcceptOfDay")
	proto.RegisterType((*AcceptOfDayReqeust)(nil), "engine.AcceptOfDayReqeust")
	proto.RegisterType((*ListAcceptOfDay)(nil), "engine.ListAcceptOfDay")
}

func init() { proto.RegisterFile("calendar.proto", fileDescriptor_e3d25d49f056cdb2) }

var fileDescriptor_e3d25d49f056cdb2 = []byte{
	// 601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0xaf, 0x9b, 0x8c, 0x4b, 0x0a, 0xdb, 0xaa, 0x98, 0x50, 0x44, 0x64, 0x09, 0x94, 0x22,
	0x91, 0xa8, 0xad, 0xe0, 0x84, 0x90, 0xd2, 0x22, 0xa2, 0x4a, 0x95, 0x90, 0x2c, 0x38, 0x5b, 0x5b,
	0xef, 0x24, 0x2c, 0xad, 0x77, 0xdd, 0xec, 0xa6, 0xc8, 0x1c, 0x39, 0x72, 0xe5, 0x1d, 0x78, 0x21,
	0x1e, 0x01, 0x1e, 0x04, 0x79, 0xd7, 0x36, 0x2e, 0x09, 0x52, 0x6f, 0x99, 0x6f, 0xbe, 0xf9, 0x66,
	0x66, 0xbf, 0x71, 0xa0, 0x17, 0xd1, 0x4b, 0x14, 0x8c, 0x2e, 0x46, 0xc9, 0x42, 0x6a, 0x49, 0x1c,
	0x14, 0x73, 0x2e, 0xb0, 0xef, 0x46, 0x52, 0x28, 0x6d, 0xc1, 0xfe, 0xde, 0x5c, 0xca, 0xf9, 0x25,
	0x8e, 0x69, 0xc2, 0xc7, 0x54, 0x08, 0xa9, 0xa9, 0xe6, 0x52, 0x28, 0x9b, 0xf5, 0x5f, 0xc2, 0xe6,
	0x19, 0x57, 0xfa, 0x24, 0x17, 0x22, 0x4f, 0xa1, 0xcd, 0x35, 0xc6, 0xca, 0xab, 0x0f, 0x9a, 0x43,
	0xf7, 0xf0, 0xee, 0xc8, 0x4a, 0x8e, 0x0a, 0x42, 0x60, 0xd3, 0xfe, 0xaf, 0x06, 0x74, 0xca, 0xa2,
	0x1e, 0x34, 0x38, 0xf3, 0xea, 0x83, 0xfa, 0xb0, 0x19, 0x34, 0x38, 0x23, 0x0f, 0xa1, 0xcb, 0x64,
	0x4c, 0xb9, 0x08, 0x39, 0xf3, 0x1a, 0x06, 0xee, 0x58, 0xe0, 0x94, 0x91, 0x47, 0x00, 0xd1, 0x02,
	0xa9, 0x46, 0x16, 0x52, 0xed, 0x35, 0x4d, 0xb6, 0x9b, 0x23, 0x13, 0x4d, 0x9e, 0xff, 0x4d, 0x9f,
	0xa7, 0x5e, 0x6b, 0x50, 0x1f, 0xba, 0x87, 0xbd, 0x62, 0x8a, 0x33, 0x29, 0x2f, 0x96, 0x49, 0x49,
	0x3f, 0x4e, 0x33, 0xb5, 0x65, 0xc2, 0x0a, 0xb5, 0xb6, 0x55, 0xcb, 0x11, 0xab, 0x56, 0xa4, 0xcf,
	0x53, 0xcf, 0x59, 0xaf, 0x96, 0x33, 0x8e, 0x53, 0x42, 0xa0, 0x25, 0x68, 0x8c, 0xde, 0xc6, 0xa0,
	0x3e, 0xec, 0x06, 0xe6, 0x37, 0xd9, 0x81, 0xb6, 0xd2, 0x74, 0xa1, 0xbd, 0x8e, 0x11, 0xb7, 0x01,
	0xd9, 0x05, 0x67, 0xc6, 0x05, 0x57, 0x1f, 0xbd, 0xae, 0x81, 0xf3, 0x88, 0x3c, 0x83, 0x8e, 0xe6,
	0x31, 0x7e, 0x91, 0x02, 0x3d, 0x58, 0xdb, 0xae, 0xcc, 0x93, 0x01, 0xb8, 0x0c, 0x55, 0xb4, 0xe0,
	0x49, 0xe6, 0x88, 0xe7, 0x9a, 0xa6, 0x55, 0xc8, 0x7f, 0x0d, 0x3b, 0x99, 0x3b, 0xef, 0xf3, 0x8a,
	0x00, 0x55, 0x22, 0x85, 0xc2, 0xff, 0xba, 0x54, 0x12, 0x73, 0x97, 0xde, 0x42, 0xa7, 0x80, 0x56,
	0x4c, 0x2a, 0x76, 0x6d, 0x54, 0x76, 0xdd, 0x05, 0x47, 0xce, 0x66, 0x0a, 0xad, 0x2f, 0xdd, 0x20,
	0x8f, 0xfc, 0x6f, 0x75, 0x70, 0x27, 0x51, 0x84, 0x89, 0x7e, 0x37, 0x7b, 0x43, 0xd3, 0x15, 0xad,
	0x07, 0xd0, 0xf9, 0x8c, 0x78, 0x11, 0x32, 0x9a, 0x9a, 0xca, 0x76, 0xb0, 0x91, 0xc5, 0x19, 0x75,
	0x1f, 0xee, 0x99, 0x17, 0x0b, 0xb3, 0xb5, 0x43, 0x39, 0x33, 0x9c, 0x96, 0xe1, 0xf4, 0x4c, 0x22,
	0x1b, 0xd0, 0xaa, 0x3e, 0x81, 0x2d, 0x14, 0xec, 0x06, 0xb1, 0x6d, 0x88, 0x9b, 0x28, 0x58, 0x49,
	0xf3, 0x5f, 0x00, 0xa9, 0xcc, 0x12, 0xe0, 0x15, 0x2e, 0x95, 0x26, 0x8f, 0xc1, 0x2d, 0xbe, 0x86,
	0xb0, 0x9c, 0x0d, 0x0a, 0xe8, 0x94, 0xf9, 0xaf, 0x60, 0x2b, 0x7b, 0xcb, 0xea, 0x1a, 0xfb, 0x37,
	0x9f, 0x71, 0xbb, 0x78, 0xc6, 0xaa, 0xbc, 0x65, 0x1c, 0xfe, 0x68, 0x82, 0x5b, 0xdc, 0xfb, 0x24,
	0xe1, 0x64, 0x02, 0xce, 0x89, 0x39, 0x42, 0xb2, 0xf2, 0x89, 0xf4, 0x57, 0x10, 0x7f, 0xfb, 0xeb,
	0xcf, 0xdf, 0xdf, 0x1b, 0x77, 0x88, 0x3b, 0xbe, 0x3e, 0x18, 0xd3, 0x4f, 0x5c, 0x73, 0x31, 0x27,
	0x47, 0xd0, 0xca, 0x06, 0x22, 0x65, 0xdb, 0x2c, 0x0a, 0xf0, 0x6a, 0x89, 0x4a, 0xf7, 0x77, 0xaa,
	0x60, 0xa9, 0x53, 0x23, 0x23, 0x68, 0x4e, 0xb1, 0x52, 0x73, 0xaa, 0x31, 0x2e, 0x6a, 0x56, 0xfb,
	0x66, 0x7c, 0xe7, 0x83, 0x39, 0xef, 0x5b, 0xcd, 0x59, 0x23, 0x07, 0xe0, 0x04, 0x18, 0xcb, 0x6b,
	0xbc, 0x7d, 0x8b, 0x13, 0xd8, 0x9c, 0x62, 0x79, 0xa3, 0x6a, 0xfd, 0x3e, 0x7b, 0x55, 0xf0, 0xdf,
	0x7b, 0xf6, 0x6b, 0x64, 0x0a, 0xbd, 0x29, 0xde, 0x30, 0xa7, 0xbf, 0xce, 0x0d, 0x6b, 0x76, 0xff,
	0x7e, 0x55, 0xad, 0x92, 0xf7, 0x6b, 0xe7, 0x8e, 0xf9, 0x5f, 0x3b, 0xfa, 0x13, 0x00, 0x00, 0xff,
	0xff, 0x01, 0x96, 0x60, 0x89, 0x1c, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalendarApiClient is the client API for CalendarApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalendarApiClient interface {
	// - POST /calendar
	Create(ctx context.Context, in *Calendar, opts ...grpc.CallOption) (*Calendar, error)
	// -GET /calendar
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCalendar, error)
	// -GET /calendar/:id
	Get(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*Calendar, error)
	// -PUT /calendar/:id
	Update(ctx context.Context, in *Calendar, opts ...grpc.CallOption) (*Calendar, error)
	// -DELETE /calendar/:id
	Remove(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*Calendar, error)
	// -GET /calendar/timezones
	GetTimezones(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListTimezoneResponse, error)
	// -GET /calendar/:id/accept
	GetAcceptOfDay(ctx context.Context, in *AcceptOfDayReqeust, opts ...grpc.CallOption) (*ListAcceptOfDay, error)
}

type calendarApiClient struct {
	cc *grpc.ClientConn
}

func NewCalendarApiClient(cc *grpc.ClientConn) CalendarApiClient {
	return &calendarApiClient{cc}
}

func (c *calendarApiClient) Create(ctx context.Context, in *Calendar, opts ...grpc.CallOption) (*Calendar, error) {
	out := new(Calendar)
	err := c.cc.Invoke(ctx, "/engine.CalendarApi/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarApiClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCalendar, error) {
	out := new(ListCalendar)
	err := c.cc.Invoke(ctx, "/engine.CalendarApi/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarApiClient) Get(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*Calendar, error) {
	out := new(Calendar)
	err := c.cc.Invoke(ctx, "/engine.CalendarApi/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarApiClient) Update(ctx context.Context, in *Calendar, opts ...grpc.CallOption) (*Calendar, error) {
	out := new(Calendar)
	err := c.cc.Invoke(ctx, "/engine.CalendarApi/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarApiClient) Remove(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*Calendar, error) {
	out := new(Calendar)
	err := c.cc.Invoke(ctx, "/engine.CalendarApi/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarApiClient) GetTimezones(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListTimezoneResponse, error) {
	out := new(ListTimezoneResponse)
	err := c.cc.Invoke(ctx, "/engine.CalendarApi/GetTimezones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarApiClient) GetAcceptOfDay(ctx context.Context, in *AcceptOfDayReqeust, opts ...grpc.CallOption) (*ListAcceptOfDay, error) {
	out := new(ListAcceptOfDay)
	err := c.cc.Invoke(ctx, "/engine.CalendarApi/GetAcceptOfDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarApiServer is the server API for CalendarApi service.
type CalendarApiServer interface {
	// - POST /calendar
	Create(context.Context, *Calendar) (*Calendar, error)
	// -GET /calendar
	List(context.Context, *ListRequest) (*ListCalendar, error)
	// -GET /calendar/:id
	Get(context.Context, *ItemRequest) (*Calendar, error)
	// -PUT /calendar/:id
	Update(context.Context, *Calendar) (*Calendar, error)
	// -DELETE /calendar/:id
	Remove(context.Context, *ItemRequest) (*Calendar, error)
	// -GET /calendar/timezones
	GetTimezones(context.Context, *ListRequest) (*ListTimezoneResponse, error)
	// -GET /calendar/:id/accept
	GetAcceptOfDay(context.Context, *AcceptOfDayReqeust) (*ListAcceptOfDay, error)
}

// UnimplementedCalendarApiServer can be embedded to have forward compatible implementations.
type UnimplementedCalendarApiServer struct {
}

func (*UnimplementedCalendarApiServer) Create(ctx context.Context, req *Calendar) (*Calendar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCalendarApiServer) List(ctx context.Context, req *ListRequest) (*ListCalendar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCalendarApiServer) Get(ctx context.Context, req *ItemRequest) (*Calendar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCalendarApiServer) Update(ctx context.Context, req *Calendar) (*Calendar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedCalendarApiServer) Remove(ctx context.Context, req *ItemRequest) (*Calendar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (*UnimplementedCalendarApiServer) GetTimezones(ctx context.Context, req *ListRequest) (*ListTimezoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimezones not implemented")
}
func (*UnimplementedCalendarApiServer) GetAcceptOfDay(ctx context.Context, req *AcceptOfDayReqeust) (*ListAcceptOfDay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAcceptOfDay not implemented")
}

func RegisterCalendarApiServer(s *grpc.Server, srv CalendarApiServer) {
	s.RegisterService(&_CalendarApi_serviceDesc, srv)
}

func _CalendarApi_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Calendar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarApiServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarApi/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarApiServer).Create(ctx, req.(*Calendar))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarApi_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarApiServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarApi/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarApiServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarApi_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarApiServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarApi/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarApiServer).Get(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarApi_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Calendar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarApiServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarApi/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarApiServer).Update(ctx, req.(*Calendar))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarApi_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarApiServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarApi/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarApiServer).Remove(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarApi_GetTimezones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarApiServer).GetTimezones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarApi/GetTimezones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarApiServer).GetTimezones(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarApi_GetAcceptOfDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptOfDayReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarApiServer).GetAcceptOfDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.CalendarApi/GetAcceptOfDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarApiServer).GetAcceptOfDay(ctx, req.(*AcceptOfDayReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalendarApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "engine.CalendarApi",
	HandlerType: (*CalendarApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CalendarApi_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CalendarApi_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CalendarApi_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CalendarApi_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _CalendarApi_Remove_Handler,
		},
		{
			MethodName: "GetTimezones",
			Handler:    _CalendarApi_GetTimezones_Handler,
		},
		{
			MethodName: "GetAcceptOfDay",
			Handler:    _CalendarApi_GetAcceptOfDay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calendar.proto",
}
