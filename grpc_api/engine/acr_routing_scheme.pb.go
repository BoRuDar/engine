// Code generated by protoc-gen-go. DO NOT EDIT.
// source: acr_routing_scheme.proto

package engine

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RoutingScheme struct {
	Id          int64                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DomainId    int64                `protobuf:"varint,2,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	CreatedAt   int64                `protobuf:"varint,3,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	CreatedBy   *Lookup              `protobuf:"bytes,4,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	UpdatedAt   int64                `protobuf:"varint,5,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	UpdatedBy   *Lookup              `protobuf:"bytes,6,opt,name=updated_by,json=updatedBy" json:"updated_by,omitempty"`
	Name        string               `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	Description string               `protobuf:"bytes,8,opt,name=description" json:"description,omitempty"`
	Type        int32                `protobuf:"varint,9,opt,name=type" json:"type,omitempty"`
	Scheme      *google_protobuf.Any `protobuf:"bytes,10,opt,name=scheme" json:"scheme,omitempty"`
	Payload     *google_protobuf.Any `protobuf:"bytes,11,opt,name=payload" json:"payload,omitempty"`
	Debug       bool                 `protobuf:"varint,12,opt,name=debug" json:"debug,omitempty"`
}

func (m *RoutingScheme) Reset()                    { *m = RoutingScheme{} }
func (m *RoutingScheme) String() string            { return proto.CompactTextString(m) }
func (*RoutingScheme) ProtoMessage()               {}
func (*RoutingScheme) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *RoutingScheme) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RoutingScheme) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *RoutingScheme) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *RoutingScheme) GetCreatedBy() *Lookup {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *RoutingScheme) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *RoutingScheme) GetUpdatedBy() *Lookup {
	if m != nil {
		return m.UpdatedBy
	}
	return nil
}

func (m *RoutingScheme) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoutingScheme) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RoutingScheme) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RoutingScheme) GetScheme() *google_protobuf.Any {
	if m != nil {
		return m.Scheme
	}
	return nil
}

func (m *RoutingScheme) GetPayload() *google_protobuf.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *RoutingScheme) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

type ListRoutingScheme struct {
	Items []*RoutingScheme `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ListRoutingScheme) Reset()                    { *m = ListRoutingScheme{} }
func (m *ListRoutingScheme) String() string            { return proto.CompactTextString(m) }
func (*ListRoutingScheme) ProtoMessage()               {}
func (*ListRoutingScheme) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ListRoutingScheme) GetItems() []*RoutingScheme {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*RoutingScheme)(nil), "engine.RoutingScheme")
	proto.RegisterType((*ListRoutingScheme)(nil), "engine.ListRoutingScheme")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RoutingSchemeApi service

type RoutingSchemeApiClient interface {
	// POST /routing/scheme
	Create(ctx context.Context, in *RoutingScheme, opts ...grpc.CallOption) (*RoutingScheme, error)
	// GET /routing/scheme?size=10&page=0
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListRoutingScheme, error)
	// GET /routing/scheme/:ID
	Get(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*RoutingScheme, error)
	// PUT /routing/scheme/:ID
	Update(ctx context.Context, in *RoutingScheme, opts ...grpc.CallOption) (*RoutingScheme, error)
	// DELETE /routing/scheme/:ID
	Remove(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*RoutingScheme, error)
}

type routingSchemeApiClient struct {
	cc *grpc.ClientConn
}

func NewRoutingSchemeApiClient(cc *grpc.ClientConn) RoutingSchemeApiClient {
	return &routingSchemeApiClient{cc}
}

func (c *routingSchemeApiClient) Create(ctx context.Context, in *RoutingScheme, opts ...grpc.CallOption) (*RoutingScheme, error) {
	out := new(RoutingScheme)
	err := grpc.Invoke(ctx, "/engine.RoutingSchemeApi/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingSchemeApiClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListRoutingScheme, error) {
	out := new(ListRoutingScheme)
	err := grpc.Invoke(ctx, "/engine.RoutingSchemeApi/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingSchemeApiClient) Get(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*RoutingScheme, error) {
	out := new(RoutingScheme)
	err := grpc.Invoke(ctx, "/engine.RoutingSchemeApi/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingSchemeApiClient) Update(ctx context.Context, in *RoutingScheme, opts ...grpc.CallOption) (*RoutingScheme, error) {
	out := new(RoutingScheme)
	err := grpc.Invoke(ctx, "/engine.RoutingSchemeApi/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingSchemeApiClient) Remove(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*RoutingScheme, error) {
	out := new(RoutingScheme)
	err := grpc.Invoke(ctx, "/engine.RoutingSchemeApi/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoutingSchemeApi service

type RoutingSchemeApiServer interface {
	// POST /routing/scheme
	Create(context.Context, *RoutingScheme) (*RoutingScheme, error)
	// GET /routing/scheme?size=10&page=0
	List(context.Context, *ListRequest) (*ListRoutingScheme, error)
	// GET /routing/scheme/:ID
	Get(context.Context, *ItemRequest) (*RoutingScheme, error)
	// PUT /routing/scheme/:ID
	Update(context.Context, *RoutingScheme) (*RoutingScheme, error)
	// DELETE /routing/scheme/:ID
	Remove(context.Context, *ItemRequest) (*RoutingScheme, error)
}

func RegisterRoutingSchemeApiServer(s *grpc.Server, srv RoutingSchemeApiServer) {
	s.RegisterService(&_RoutingSchemeApi_serviceDesc, srv)
}

func _RoutingSchemeApi_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingScheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingSchemeApiServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.RoutingSchemeApi/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingSchemeApiServer).Create(ctx, req.(*RoutingScheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingSchemeApi_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingSchemeApiServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.RoutingSchemeApi/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingSchemeApiServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingSchemeApi_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingSchemeApiServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.RoutingSchemeApi/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingSchemeApiServer).Get(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingSchemeApi_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingScheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingSchemeApiServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.RoutingSchemeApi/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingSchemeApiServer).Update(ctx, req.(*RoutingScheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingSchemeApi_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingSchemeApiServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.RoutingSchemeApi/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingSchemeApiServer).Remove(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoutingSchemeApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "engine.RoutingSchemeApi",
	HandlerType: (*RoutingSchemeApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RoutingSchemeApi_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RoutingSchemeApi_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RoutingSchemeApi_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RoutingSchemeApi_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _RoutingSchemeApi_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acr_routing_scheme.proto",
}

func init() { proto.RegisterFile("acr_routing_scheme.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0x4f, 0x6b, 0xd4, 0x40,
	0x14, 0x37, 0x9b, 0xdd, 0x74, 0xf7, 0x45, 0x8b, 0x8e, 0x15, 0xa6, 0x2b, 0x42, 0xd8, 0x53, 0x40,
	0x4d, 0x61, 0x0b, 0xd2, 0xa3, 0x5b, 0x0f, 0x52, 0xe8, 0x69, 0xc4, 0xf3, 0x32, 0xc9, 0x3c, 0xe3,
	0x60, 0x33, 0x13, 0x93, 0x89, 0x30, 0x5f, 0xc4, 0x6f, 0xe1, 0x77, 0x94, 0xcc, 0x24, 0xb5, 0x91,
	0xa5, 0xb0, 0xb7, 0xcc, 0xef, 0xdf, 0x7b, 0xf9, 0x3d, 0xa0, 0xbc, 0x68, 0xf6, 0x8d, 0xee, 0x8c,
	0x54, 0xe5, 0xbe, 0x2d, 0xbe, 0x63, 0x85, 0x59, 0xdd, 0x68, 0xa3, 0x49, 0x84, 0xaa, 0x94, 0x0a,
	0xd7, 0x71, 0xa1, 0x55, 0x6b, 0x3c, 0xb8, 0x3e, 0x2f, 0xb5, 0x2e, 0xef, 0xf0, 0xc2, 0xbd, 0xf2,
	0xee, 0xdb, 0x05, 0x57, 0xd6, 0x53, 0x9b, 0xdf, 0x21, 0x3c, 0x63, 0x3e, 0xe8, 0x8b, 0xcb, 0x21,
	0xa7, 0x30, 0x93, 0x82, 0x06, 0x49, 0x90, 0x86, 0x6c, 0x26, 0x05, 0x79, 0x0d, 0x2b, 0xa1, 0x2b,
	0x2e, 0xd5, 0x5e, 0x0a, 0x3a, 0x73, 0xf0, 0xd2, 0x03, 0x37, 0x82, 0xbc, 0x01, 0x28, 0x1a, 0xe4,
	0x06, 0xc5, 0x9e, 0x1b, 0x1a, 0x3a, 0x76, 0x35, 0x20, 0x3b, 0x43, 0xde, 0xff, 0xa3, 0x73, 0x4b,
	0xe7, 0x49, 0x90, 0xc6, 0xdb, 0xd3, 0xcc, 0xaf, 0x98, 0xdd, 0x6a, 0xfd, 0xa3, 0xab, 0xef, 0xe5,
	0xd7, 0xb6, 0x4f, 0xeb, 0x6a, 0x31, 0xa6, 0x2d, 0x7c, 0xda, 0x80, 0xf8, 0xb4, 0x91, 0xce, 0x2d,
	0x8d, 0x0e, 0xa7, 0x0d, 0x8a, 0x6b, 0x4b, 0x08, 0xcc, 0x15, 0xaf, 0x90, 0x9e, 0x24, 0x41, 0xba,
	0x62, 0xee, 0x9b, 0x24, 0x10, 0x0b, 0x6c, 0x8b, 0x46, 0xd6, 0x46, 0x6a, 0x45, 0x97, 0x8e, 0x7a,
	0x08, 0xf5, 0x2e, 0x63, 0x6b, 0xa4, 0xab, 0x24, 0x48, 0x17, 0xcc, 0x7d, 0x93, 0x77, 0x10, 0xf9,
	0x92, 0x29, 0xb8, 0xa1, 0x67, 0x99, 0x2f, 0x34, 0x1b, 0x0b, 0xcd, 0x76, 0xca, 0xb2, 0x41, 0x43,
	0x32, 0x38, 0xa9, 0xb9, 0xbd, 0xd3, 0x5c, 0xd0, 0xf8, 0x11, 0xf9, 0x28, 0x22, 0x67, 0xb0, 0x10,
	0x98, 0x77, 0x25, 0x7d, 0x9a, 0x04, 0xe9, 0x92, 0xf9, 0xc7, 0xe6, 0x23, 0xbc, 0xb8, 0x95, 0xad,
	0x99, 0xde, 0xe6, 0x2d, 0x2c, 0xa4, 0xc1, 0xaa, 0xa5, 0x41, 0x12, 0xa6, 0xf1, 0xf6, 0xd5, 0xf8,
	0xf3, 0x13, 0x15, 0xf3, 0x9a, 0xed, 0x9f, 0x19, 0x3c, 0x9f, 0x10, 0xbb, 0x5a, 0x92, 0x2b, 0x88,
	0x3e, 0xb9, 0xbe, 0xc9, 0x61, 0xf3, 0xfa, 0x30, 0xbc, 0x79, 0x42, 0xae, 0x60, 0xde, 0x2f, 0x44,
	0x5e, 0xde, 0x37, 0xde, 0xaf, 0x87, 0x3f, 0x3b, 0x6c, 0xcd, 0xfa, 0x7c, 0x02, 0xfe, 0xe7, 0xbc,
	0x84, 0xf0, 0x33, 0x3e, 0x30, 0xde, 0x18, 0xac, 0x46, 0xe3, 0x23, 0xe3, 0xa2, 0xaf, 0xee, 0x94,
	0x47, 0x2f, 0xfa, 0x01, 0x22, 0x86, 0x95, 0xfe, 0x85, 0xc7, 0x4d, 0xcc, 0x23, 0x77, 0x9e, 0xcb,
	0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x77, 0xae, 0x93, 0x48, 0x5d, 0x03, 0x00, 0x00,
}
